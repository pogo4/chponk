Функция КодЗамещающегоМетода(ИмяМетода, МеткаВозврата, ИмяПеременнойРезультата = "") Экспорт
	
	Настройки = ПрочитатьНастройкиДляМетода(ИмяМетода);
	
	Файл = ПрочитатьНастройки("ПодключенныеФайлы")[Настройки.Файл];
	
	ТекстовыйДокумент = Файл.ТекстФайла;
	ТекстМодуля = ТекстовыйДокумент.ПолучитьТекст();
	
	ОписанияМетодов = ПрочитатьОписанияМетодов(УдалитьКомментарииИФорматирование(ТекстовыйДокумент));
	
	СтрокаНачалаМетода = СтрШаблон("%1 %2(", Настройки.ТипМетода, Настройки.Метод);
	СтрокаОкончанияМетода = ?(Настройки.ТипМетода = "Процедура", "КонецПроцедуры", "КонецФункции");
	
	ПозицияНачалаМетода = Макс(СтрНайти(ТекстМодуля, СтрокаНачалаМетода), 1);
	ПозицияОкончанияМетода = СтрНайти(ТекстМодуля, СтрокаОкончанияМетода, , ПозицияНачалаМетода);
	
	Если ПозицияНачалаМетода = 0 Тогда
		
		ТекстИсключения = СтрШаблон("Метод <%1> в файле <%2> не обнаружен.", Настройки.Метод, Настройки.Файл);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	НачальнаяПозиция = СтрНайти(ТекстМодуля, Символы.ПС, , ПозицияНачалаМетода) + 1;
	ДлинаПодстроки = ПозицияОкончанияМетода - НачальнаяПозиция;
	
	КодМетода = Сред(ТекстМодуля, НачальнаяПозиция, ДлинаПодстроки);
	КодМетодаВРег = ВРег(КодМетода);
	
	СимволыОбрамленияСлова = Новый Массив;
	СимволыОбрамленияСлова.Добавить(Символы.Таб);
	СимволыОбрамленияСлова.Добавить(Символы.ВК);
	СимволыОбрамленияСлова.Добавить(Символы.НПП);
	СимволыОбрамленияСлова.Добавить(Символы.ПС);
	СимволыОбрамленияСлова.Добавить(";");
	СимволыОбрамленияСлова.Добавить(" ");
	
	ПодстрокаПоиска = "ВОЗВРАТ";
	ДлинаПодстроки = СтрДлина(ПодстрокаПоиска);
	ЧислоВхождений = СтрЧислоВхождений(ВРег(КодМетода), ПодстрокаПоиска);
	НомерВхождения = 1;
	
	Для Сч = 1 По ЧислоВхождений Цикл
		
		ПозицияПодстроки = СтрНайти(ВРег(КодМетода), ПодстрокаПоиска, , , НомерВхождения);
		
		ПредыдущийСимвол = Сред(КодМетода, ПозицияПодстроки - 1, 1);
		СледующийСимвол = Сред(КодМетода, ПозицияПодстроки + ДлинаПодстроки, 1);
		
		Если СимволыОбрамленияСлова.Найти(ПредыдущийСимвол) = Неопределено 
			Или СимволыОбрамленияСлова.Найти(СледующийСимвол) = Неопределено Тогда
			
			НомерВхождения = НомерВхождения + 1;
			Продолжить;
			
		КонецЕсли;
		
		Если Настройки.ТипМетода = "Процедура" Тогда
			
			КодМетода = СтрШаблон("%1ВызватьИсключение ""%2""%3",
				Сред(КодМетода, 1, ПозицияПодстроки - 1),
				МеткаВозврата,
				Сред(КодМетода, ПозицияПодстроки + ДлинаПодстроки));
			
		Иначе
			
			ПозицияКонцаСтрокиВозврата = СтрНайти(КодМетода, ";", , ПозицияПодстроки + ДлинаПодстроки);
			КодМетода = СтрШаблон("%1%2 = %3; ВызватьИсключение ""%4""%5",
				Сред(КодМетода, 1, ПозицияПодстроки - 1),
				ИмяПеременнойРезультата,
				Сред(КодМетода, ПозицияПодстроки + ДлинаПодстроки, ПозицияКонцаСтрокиВозврата - ПозицияПодстроки - ДлинаПодстроки),
				МеткаВозврата,
				Сред(КодМетода, ПозицияКонцаСтрокиВозврата + 1));
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Для Каждого ИмяМетода Из СписокМетодов() Цикл
	//	
	//	КодМетодаДляПоиска = СтрЗаменить(СтрЗаменить(ВРег(КодМетода), Символы.ПС, " "), Символы.Таб, " ");
	//	ПодстрокаПоиска = ВРег(СтрШаблон(" %1(", ИмяМетода));
	//	Позиция = СтрНайти(КодМетодаДляПоиска, ПодстрокаПоиска);
	//	
	//	Если Позиция = 0 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	ПодстрокаЗамены = СтрШаблон(" Чпоньк_%1(",
	//		ИмяМетода);
	//	
	//	КодМетода = СтрШаблон("%1%2%3",
	//		Сред(КодМетода, 1, Позиция - 1),
	//		ПодстрокаЗамены,
	//		Сред(КодМетода, Позиция + СтрДлина(ПодстрокаПоиска)));
	//	
	//КонецЦикла;
	
	Возврат КодМетода;
	
КонецФункции

Функция УдалитьКомментарииИФорматирование(ТекстовыйДокумент)
	
	ФорматированныеСтроки = Новый Массив;
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		Строка = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
		
		Если СтрНачинаетсяС(СокрЛП(Строка), "#Область ")
			Или СтрНачинаетсяС(СокрЛП(Строка), "#КонецОбласти") Тогда
			Продолжить;
		КонецЕсли;
		
		ЧислоВхожденийСлэшей = СтрЧислоВхождений(Строка, "//");
		
		Если ЧислоВхожденийСлэшей > 0 Тогда
			
			НачальнаяПозиция = 1;
			ПозицияСлэшей = СтрНайти(Строка, "//", , НачальнаяПозиция);
			
			Пока ПозицияСлэшей > 0 Цикл
				
				СтрокаДоСлэшей = Сред(Строка, 1, ПозицияСлэшей - 1);
				ПозицияПереносаСтроки = СтрНайти(СтрокаДоСлэшей, "|", НаправлениеПоиска.СКонца);
				
				Если ПозицияПереносаСтроки = 0 Тогда
					Если СтрЧислоВхождений(СтрокаДоСлэшей, """") % 2 = 0 Тогда
						
						Строка = СтрокаДоСлэшей;
						Прервать;
						
					Иначе
						
						ПозицияКавычекПосле = СтрНайти(Строка, """", , ПозицияСлэшей);
						НачальнаяПозиция = ?(ПозицияКавычекПосле = 0, СтрДлина(Строка), ПозицияКавычекПосле);
						
					КонецЕсли;
				Иначе
					Если СтрЧислоВхождений(Сред(СтрокаДоСлэшей, ПозицияПереносаСтроки, ПозицияСлэшей), """") % 2 = 1 Тогда
						
						Строка = СтрокаДоСлэшей;
						Прервать;
						
					Иначе
						НачальнаяПозиция = ПозицияСлэшей + 1;
					КонецЕсли;
				КонецЕсли;
				ПозицияСлэшей = СтрНайти(Строка, "//", , НачальнаяПозиция);
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СокрЛП(Строка)) Тогда
			ФорматированныеСтроки.Добавить(СокрЛП(Строка));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(ФорматированныеСтроки, " ");
	
КонецФункции

Функция ПрочитатьОписанияМетодов(Текст)
	
	ОписанияМетодов = Новый Массив;
	
	_Текст = " " + Текст;
	_Текст = СтрЗаменить(_Текст, "  ", " ");
	Разделитель = "☺";
	
	СимволыОбрамленияСлова = Новый Массив;
	СимволыОбрамленияСлова.Добавить(" ");
	СимволыОбрамленияСлова.Добавить(";");
	СимволыОбрамленияСлова.Добавить("");
	
	ПодстрокиПоиска = СтрРазделить("КОНЕЦПРОЦЕДУРЫ,КОНЕЦФУНКЦИИ", ",");
	
	Для Каждого ПодстрокаПоиска Из ПодстрокиПоиска Цикл
		
		ЧислоВхождений = СтрЧислоВхождений(ВРег(_Текст), ПодстрокаПоиска);
		ДлинаПодстроки = СтрДлина(ПодстрокаПоиска);
		НомерВхождения = 1;
		
		Для Сч = 1 По ЧислоВхождений Цикл
			
			ПозицияПодстроки = СтрНайти(ВРег(_Текст), ПодстрокаПоиска, , , НомерВхождения);
			
			ПредыдущийСимвол = Сред(_Текст, ПозицияПодстроки - 1, 1);
			СледующийСимвол = Сред(_Текст, ПозицияПодстроки + ДлинаПодстроки, 1);
			
			Если СимволыОбрамленияСлова.Найти(ПредыдущийСимвол) = Неопределено 
				Или СимволыОбрамленияСлова.Найти(СледующийСимвол) = Неопределено Тогда
				
				НомерВхождения = НомерВхождения + 1;
				Продолжить;
				
			КонецЕсли;
			
			_Текст = СтрШаблон("%1%2%3",
				Сред(_Текст, 1, ПозицияПодстроки + ДлинаПодстроки - 2),
				Разделитель,
				Сред(_текст, ПозицияПодстроки + ДлинаПодстроки));
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстыМетодов = СтрРазделить(_Текст, Разделитель, Ложь);
	КлючОбъектаОбщий = "";
	ДирективыКомпиляции = СтрРазделить("НАКЛИЕНТЕ,НАСЕРВЕРЕ,НАСЕРВЕРЕБЕЗКОНТЕКСТА,НАКЛИЕНТЕНАСЕРВЕРЕБЕЗКОНТЕКСТА,НАКЛИЕНТЕНАСЕРВЕРЕ", ",");
	Аннотации = СтрРазделить("ВМЕСТО,ПЕРЕД,ПОСЛЕ", ",");
	
	Для Каждого ТекстМетода Из ТекстыМетодов Цикл
		
		ОписаниеМетода = Новый Структура("КлючОбъекта,Событие,Аннотация,РасширяемыйМетод,ДирективаКомпиляции,ТипМетода,Метод,Параметры,Экспорт,КодМетода");
		
		Если СтрЗаканчиваетсяНа(ВРег(ТекстМетода), "КОНЕЦПРОЦЕДУР") Тогда
			ОписаниеМетода.ТипМетода = "Процедура";
		ИначеЕсли СтрЗаканчиваетсяНа(ВРег(ТекстМетода), "КОНЕЦФУНКЦИ") Тогда
			ОписаниеМетода.ТипМетода = "Функция";
		Иначе
			ВызватьИсключение НСтр("ru = 'Ошибка чтения файла. Не удалось определить конец метода'");
		КонецЕсли;
		
		ПозицияНачалаМетода = СтрНайти(ВРег(ТекстМетода), СтрШаблон(" %1 ", ВРег(ОписаниеМетода.ТипМетода)));
		ПозицияНачалаПараметров = СтрНайти(ТекстМетода, "(", , ПозицияНачалаМетода);
		ПозицияКонцаПараметров = СтрНайти(ТекстМетода, ")", , ПозицияНачалаПараметров);
		ПозицияИмяМетода = ПозицияНачалаМетода + СтрДлина(ОписаниеМетода.ТипМетода) + 1;
		
		БлокИнструкций = СтрЗаменить(СокрЛП(Сред(ТекстМетода, 1, ПозицияНачалаМетода - 1)), "  ", " ");
		
		ОписаниеМетода.КлючОбъекта = КлючОбъектаОбщий;
		ОписаниеМетода.Метод = СокрЛП(Сред(ТекстМетода, ПозицияИмяМетода, ПозицияНачалаПараметров - ПозицияИмяМетода));
		ОписаниеМетода.Параметры = СокрЛП(Сред(ТекстМетода, ПозицияНачалаПараметров + 1, ПозицияКонцаПараметров - ПозицияНачалаПараметров - 1));
		
		Если Не ПустаяСтрока(БлокИнструкций) Тогда
			
			ЧастиБлокаИнструкций = СтрРазделить(БлокИнструкций, "&", Ложь);
			
			Для Каждого Часть Из ЧастиБлокаИнструкций Цикл
				
				Если СтрНачинаетсяС(Часть, "@Модуль") Или СтрНачинаетсяС(Часть, "#Модуль") Тогда
					
					Если СтрНачинаетсяС(Часть, "@Модуль") Тогда
						Модуль = СокрЛП(МеждуСтрок(Часть, "@Модуль", "#"));
						КлючОбъектаОбщий = Модуль;
					Иначе
						Модуль = СокрЛП(МеждуСтрок(Часть, "#Модуль", "#"));
					КонецЕсли;
					
					ОписаниеМетода.КлючОбъекта = Модуль;
					
				КонецЕсли;
				
				Если СтрНайти(Часть, "#Событие ") > 0 Тогда
					ОписаниеМетода.Событие = СокрЛП(МеждуСтрок(Часть, "#Событие"));
				КонецЕсли;
				
				Если ДирективыКомпиляции.Найти(ВРег(СокрЛП(Часть))) <> Неопределено Тогда
					ОписаниеМетода.ДирективаКомпиляции = СокрЛП(Часть);
				Иначе
					
					Для Каждого Аннотация Из Аннотации Цикл
						
						Если СтрНачинаетсяС(ВРег(СокрЛП(Часть)), Аннотация) Тогда
							
							ОписаниеМетода.Аннотация = ТРег(Аннотация);
							ОписаниеМетода.РасширяемыйМетод = МеждуСтрок(Часть, """", """");
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОписаниеМетода.Экспорт = СтрНачинаетсяС(ВРег(СокрЛП(Сред(ТекстМетода, ПозицияКонцаПараметров + 1))), "ЭКСПОРТ");
		
		ДлинаКонецМетода = ?(ОписаниеМетода.ТипМетода = "Процедура", 13, 11);
		Если ОписаниеМетода.Экспорт Тогда
			ПозицияНачалаТелаМетода = ПозицияКонцаПараметров + 9;
		Иначе
			ПозицияНачалаТелаМетода = ПозицияКонцаПараметров + 1;
		КонецЕсли;
		
		ОписаниеМетода.КодМетода = СокрЛП(Сред(ТекстМетода, ПозицияНачалаТелаМетода, СтрДлина(ТекстМетода) - ПозицияНачалаТелаМетода - ДлинаКонецМетода));
		
		ОписанияМетодов.Добавить(ОписаниеМетода);
		
	КонецЦикла;
	
	Возврат ОписанияМетодов;
	
КонецФункции

Функция МеждуСтрок(Знач Строка, ПодстрокаНачало, ПодстрокаКонец = "")
	
	ПозицияНачало = СтрНайти(Строка, ПодстрокаНачало);
	Если ПозицияНачало > 0 Тогда
		ПозицияНачало = ПозицияНачало + СтрДлина(ПодстрокаНачало);
	КонецЕсли;
	
	ПозицияКонец = 0;
	Если ПодстрокаКонец <> "" Тогда
		ПозицияКонец = СтрНайти(Строка, ПодстрокаКонец, , ПозицияНачало);
	КонецЕсли;
	
	Если ПозицияКонец = 0 Тогда
		ПозицияКонец = СтрДлина(Строка) + 1;
	КонецЕсли;
	
	Возврат Сред(Строка, ПозицияНачало, ПозицияКонец - ПозицияНачало);
	
КонецФункции

Функция ПрочитатьНастройки(ИмяНастроек) Экспорт
	Возврат ХранилищеОбщихНастроек.Загрузить("Чпоньк", ИмяНастроек);
КонецФункции

Процедура ЗаписатьНастройки(ИмяНастроек, Значение) Экспорт
	ХранилищеОбщихНастроек.Сохранить("Чпоньк", ИмяНастроек, Значение);
КонецПроцедуры

Функция ПрочитатьНастройкиДляМетода(ИмяМетода)
	Возврат ПрочитатьНастройки("ЗамещающиеМетоды")[ИмяМетода];
КонецФункции

