#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Объект.ИмяПрограммы = Обработка.Метаданные().Имя;
	Заголовок = Объект.ИмяПрограммы;
	
	Объект.ИменаСущностей.Загрузить(Обработка.ТаблицаИзМакета("ИменаСущностей"));
	Объект.МодулиКлассов.Загрузить(Обработка.ТаблицаИзМакета("МодулиКлассов"));
	Объект.ОписанияКлассов.Загрузить(Обработка.ТаблицаИзМакета("ОписанияКлассов"));
	Объект.ПредопределенныеМетоды.Загрузить(Обработка.ТаблицаИзМакета("ПредопределенныеМетоды"));
	ЗаполнитьПараметрыШаблонов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗагрузитьНастройки();
	
	ПодключитьОбработчикОжидания("ПриОткрытииПосле", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыбранныеМетоды

&НаКлиенте
Процедура ВыбранныеМетодыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные = Элементы.ВыбранныеМетоды.ТекущиеДанные;
	
	Если Копирование Тогда
		
		ТекущиеДанные.Метод = "";
		ТекущиеДанные.РасширяемыйМетод = "";
		
		Возврат;
		
	КонецЕсли;
	
	ТекущиеДанныеФайлы = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДобавления = Новый Структура;
	ПараметрыДобавления.Вставить("ИдентификаторФайла", ТекущиеДанныеФайлы.Идентификатор);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыДобавленияМетода", ЭтаФорма);
	ОткрытьФорму(
		"ВнешняяОбработка.Чпоньк.Форма.ДобавлениеМетода",
		ПараметрыДобавления,
		ЭтаФорма,
		,
		,
		,
		ОписаниеОповещенияОЗакрытии);
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастроек", ЭтаФорма);
	
	ОткрытьФорму(
		"ВнешняяОбработка.Чпоньк.Форма.Настройки",
		,
		ЭтаФорма,
		УникальныйИдентификатор,
		,
		,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьРасширение()
	
	АдресФайлаРасширения = ЗначениеНастройки("АдресФайлаРасширения");
	ФайлРасширения = Новый ДвоичныеДанные(АдресФайлаРасширения);
	АдресХранилища = ПоместитьВоВременноеХранилище(ФайлРасширения, УникальныйИдентификатор);
	
	Если ПодключитьРасширениеНаСервере(АдресХранилища) Тогда
		
		ЗаписатьЗаменяющиеМетодыВНастройки();
		ЗаписатьФайлыВНастройки();
		ЗавершитьРаботуСистемы(, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИдентификаторы(Команда)
	ЗаполнитьОбъектыКонфигурацииИзФайлаВерсий();
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОткрытьФайл(Команда)
	
	Файл = Ждать ВыбратьФайл("1С (*.bsl)|*.bsl", РежимДиалогаВыбораФайла.Открытие);
	
	Если Файл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитатьФайл(Файл);
	
КонецПроцедуры

&НаКлиенте
Асинх Функция СобратьРасширение()
	
	ИсполняемыйФайлПриложения = ЗначениеНастройки("ИсполняемыйФайлПриложения");
	АдресВременнойБазы = ЗначениеНастройки("АдресВременнойБазы");
	АдресФайлаРасширения = ЗначениеНастройки("АдресФайлаРасширения");
	АдресВыгрузкиРасширения = ЗначениеНастройки("АдресВыгрузкиРасширения");
	
	КомандаСозданияВременнойБазы = СтрШаблон("%1 CREATEINFOBASE ""File=""""%2"""";""",
		ИсполняемыйФайлПриложения,
		АдресВременнойБазы);
	
	КомандаСборкиРасширения = СтрШаблон("%1 DESIGNER /IBConnectionString ""File=""""%2"""";"" /LoadConfigFromFiles ""%3"" -Extension %4 -updateConfigDumpInfo -NoCheck",
		ИсполняемыйФайлПриложения,
		АдресВременнойБазы,
		АдресВыгрузкиРасширения,
		Объект.ИмяПрограммы);
	
	КомандаВыгрузкиФайлаРасширения = СтрШаблон("%1 DESIGNER /IBConnectionString ""File=""""%2"""";"" /DumpCfg %3 -Extension %4",
		ИсполняемыйФайлПриложения,
		АдресВременнойБазы,
		АдресФайлаРасширения,
		Объект.ИмяПрограммы);
	
	КомандыПриложений = Новый массив;
	КомандыПриложений.Добавить(КомандаСозданияВременнойБазы);
	КомандыПриложений.Добавить(КомандаСборкиРасширения);
	КомандыПриложений.Добавить(КомандаВыгрузкиФайлаРасширения);
	
	Ждать ЗапуститьПриложенияПоследовательно(КомандыПриложений);
	
	ЗапуститьПриложениеАсинх(СтрШаблон("cmd /C ""rmdir /s /q """"%1""""""", АдресВременнойБазы));
	
КонецФункции

&НаКлиенте
Процедура Кнопка0()
	
	//ЗаписатьЗаменяющиеМетодыВНастройки();
	//ЗаписатьФайлыВНастройки();
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПриОткрытииПосле()
	
	Если СтрНачинаетсяС(ПараметрЗапуска, "Подключить") Тогда
		
		Сообщить("ПРивет!");
		//ИмяФайла = СокрЛП(Сред(ПараметрЗапуска, 11));
		//ПрочитатьФайл(ИмяФайла);
		//Кнопка0();
		
		Закрыть();
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьОбъектыКонфигурацииИзФайлаВерсий();
	ПрочитатьЗамещающиеМетодыИзНастроек();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыШаблонов()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	
	Для Каждого ОписаниеКласса Из Объект.ОписанияКлассов Цикл
		
		Если Не ЗначениеЗаполнено(ОписаниеКласса.ШаблонОписания) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстШаблона = Обработка.ТекстИзМакета(ОписаниеКласса.ШаблонОписания);
		
		ВсеПараметрыШаблона = НайтиПодстрокиПоМаске(ТекстШаблона, "{%}");
		ПараметрыШаблона = Новый Массив;
		
		Для Каждого Параметр Из ВсеПараметрыШаблона Цикл
			
			Параметр = Сред(Параметр, 2, СтрДлина(Параметр) - 2);
			
			Если Не СтрНачинаетсяС(Параметр, "Идентификатор_") 
				И ПараметрыШаблона.Найти(Параметр) = Неопределено Тогда
				ПараметрыШаблона.Добавить(Параметр);
			КонецЕсли;
			
		КонецЦикла;
		
		ОписаниеКласса.ПараметрыШаблона = СтрСоединить(ПараметрыШаблона, ",");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиПодстрокиПоМаске(Строка, Маска)
	
	Подстроки = Новый Массив;
	ДлинаМаски = СтрДлина(Маска);
	
	Если ДлинаМаски = 0 Тогда
		Возврат Подстроки;
	КонецЕсли;
	
	ПозицияВМаске = 1;
	ПозицияВСтроке = 1;
	ДлинаСтроки = СтрДлина(Строка);
	
	Пока ПозицияВСтроке <= ДлинаСтроки Цикл
		
		Соответствует = Истина;
		ТекущаяПозицияВСтроке = ПозицияВСтроке;
		ТекущаяПозицияВМаске = 1;
		Буфер = "";
		НайденаПодстрока = "";
		Экранирование = Ложь;
		
		Пока ТекущаяПозицияВМаске <= ДлинаМаски И ТекущаяПозицияВСтроке <= ДлинаСтроки Цикл
			
			СимволМаски = Сред(Маска, ТекущаяПозицияВМаске, 1);
			
			Если Экранирование Тогда
				
				Если Сред(Строка, ТекущаяПозицияВСтроке, 1) = СимволМаски Тогда
					
					Буфер = Буфер + СимволМаски;
					ТекущаяПозицияВСтроке = ТекущаяПозицияВСтроке + 1;
					ТекущаяПозицияВМаске = ТекущаяПозицияВМаске + 1;
					Экранирование = Ложь;
					
				Иначе
					
					Соответствует = Ложь;
					Прервать;
					
				КонецЕсли;
				
			ИначеЕсли СимволМаски = "/" Тогда
				
				Экранирование = Истина;
				ТекущаяПозицияВМаске = ТекущаяПозицияВМаске + 1;
				
			ИначеЕсли СимволМаски = "%" Тогда
				
				ОстатокМаски = Сред(Маска, ТекущаяПозицияВМаске + 1);
				
				Если ПустаяСтрока(ОстатокМаски) Тогда
					
					НайденаПодстрока = НайденаПодстрока + Сред(Строка, ТекущаяПозицияВСтроке);
					ТекущаяПозицияВСтроке = ДлинаСтроки + 1;
					ТекущаяПозицияВМаске = ДлинаМаски + 1;
					
				Иначе
					
					СледующийСимволМаски = Лев(ОстатокМаски, 1);
					
					Если СледующийСимволМаски = "/" Тогда
						СледующийСимволМаски = Сред(ОстатокМаски, 2, 1);
					КонецЕсли;
					
					НайденаяПозиция = СимволПослеПроцента(Строка, ТекущаяПозицияВСтроке, СледующийСимволМаски);
					
					Если НайденаяПозиция = 0 Тогда
						
						Соответствует = Ложь;
						Прервать;
						
					Иначе
						
						НайденаПодстрока = НайденаПодстрока + Сред(Строка, ТекущаяПозицияВСтроке, НайденаяПозиция - ТекущаяПозицияВСтроке);
						ТекущаяПозицияВСтроке = НайденаяПозиция;
						ТекущаяПозицияВМаске = ТекущаяПозицияВМаске + 1;
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли СимволМаски = "_" Тогда
				
				НайденаПодстрока = НайденаПодстрока + Сред(Строка, ТекущаяПозицияВСтроке, 1);
				ТекущаяПозицияВСтроке = ТекущаяПозицияВСтроке + 1;
				ТекущаяПозицияВМаске = ТекущаяПозицияВМаске + 1;
				
			Иначе
				
				Если Сред(Строка, ТекущаяПозицияВСтроке, 1) = СимволМаски Тогда
					
					НайденаПодстрока = НайденаПодстрока + СимволМаски;
					ТекущаяПозицияВСтроке = ТекущаяПозицияВСтроке + 1;
					ТекущаяПозицияВМаске = ТекущаяПозицияВМаске + 1;
					
				Иначе
					
					Соответствует = Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Соответствует И ТекущаяПозицияВМаске > ДлинаМаски Тогда
			
			Подстроки.Добавить(НайденаПодстрока);
			ПозицияВСтроке = ТекущаяПозицияВСтроке;
			
		Иначе
			
			ПозицияВСтроке = ПозицияВСтроке + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Подстроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СимволПослеПроцента(Строка, НачальнаяПозиция, Символ)
	
	НайденнаяПозиция = 0;
	
	Для Позиция = НачальнаяПозиция По СтрДлина(Строка) Цикл
		
		Если Сред(Строка, Позиция, 1) = Символ Тогда
			
			НайденнаяПозиция = Позиция;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденнаяПозиция;
	
КонецФункции

&НаКлиенте
Функция ДобавитьЗаписьВФайлы(Файл)
	
	ЗаписьФайлы = Файлы.Добавить();
	ЗаписьФайлы.Имя = Файл.Имя;
	ЗаписьФайлы.ПолноеИмя = Файл.ПолноеИмя;
	ЗаписьФайлы.Идентификатор = Строка(Новый УникальныйИдентификатор);
	
	ОповещениеОЗавершенииВремениИзмененияФайла = Новый ОписаниеОповещения("ЗавершениеПолученияВремениИзмененияФайла", ЭтотОбъект, ЗаписьФайлы);
	Файл.НачатьПолучениеВремениИзменения(ОповещениеОЗавершенииВремениИзмененияФайла);
	
	Возврат ЗаписьФайлы;
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеПолученияВремениИзмененияФайла(ВремяИзменения, Файл) Экспорт
	Файл.ВремяИзменения = ВремяИзменения;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЗаменяющиеМетодыВНастройки()
	
	СтруктураНастроек = Новый Соответствие;
	
	ШаблонНастроекМетода = Новый Структура;
	Колонки = ВыбранныеМетоды.Выгрузить().Колонки;
	Для Каждого Колонка Из Колонки Цикл
		ШаблонНастроекМетода.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ФайлПоИдентификатору = Новый Соответствие;
	
	Для Каждого СтрокаФайлы Из Файлы Цикл
		ФайлПоИдентификатору.Вставить(СтрокаФайлы.Идентификатор, СтрокаФайлы.ПолноеИмя);
	КонецЦикла;
	
	Для Каждого ОписаниеМетода Из ВыбранныеМетоды Цикл
		
		НастройкиМетода = Новый Структура(Новый ФиксированнаяСтруктура(ШаблонНастроекМетода));
		ЗаполнитьЗначенияСвойств(НастройкиМетода, ОписаниеМетода);
		НастройкиМетода.Файл = ФайлПоИдентификатору[ОписаниеМетода.Файл];
		СтруктураНастроек.Вставить(ОписаниеМетода.Метод, НастройкиМетода);
		
	КонецЦикла;
	
	ХранилищеОбщихНастроек.Сохранить(Объект.ИмяПрограммы, "ЗамещающиеМетоды", СтруктураНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьФайлыВНастройки()
	
	Настройки = Новый Соответствие;
	
	ШаблонОписания = Новый Структура;
	Колонки = Файлы.Выгрузить().Колонки;
	Для Каждого Колонка Из Колонки Цикл
		ШаблонОписания.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Для Каждого Файл Из Файлы Цикл
		
		ОписаниеФайла = Новый Структура(Новый ФиксированнаяСтруктура(ШаблонОписания));
		ЗаполнитьЗначенияСвойств(ОписаниеФайла, Файл);
		Настройки.Вставить(ОписаниеФайла.ПолноеИмя, ОписаниеФайла);
		
	КонецЦикла;
	
	ХранилищеОбщихНастроек.Сохранить(Объект.ИмяПрограммы, "ПодключенныеФайлы", Настройки);
	
КонецПроцедуры

&НаСервере
Функция ПодключитьРасширениеНаСервере(АдресХранилища)
	
	Лог("ПодключитьРасширениеНаСервере()");
	
	ДанныеРасширения = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Отбор = Новый Структура("Имя", Объект.ИмяПрограммы);
	НайденныеРасширения = РасширенияКонфигурации.Получить(Отбор);
	
	Если НайденныеРасширения.Количество() > 0 Тогда
		Расширение = НайденныеРасширения[0];
	Иначе
		Расширение = РасширенияКонфигурации.Создать();
	КонецЕсли;
	
	Расширение.БезопасныйРежим = Ложь;
	Расширение.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
	Расширение.ОбластьДействия = ОбластьДействияРасширенияКонфигурации.ИнформационнаяБаза;
	
	Попытка
		Расширение.Записать(ДанныеРасширения);
		Результат = Истина;
	Исключение
		Сообщить(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Асинх Функция ПрочитатьФайлВерсий(Приемник)
	
	ИмяФайла = ЗначениеНастройки("АдресФайлаВерсий");
	
	Файл = Новый Файл(ИмяФайла);
	ФайлСуществует = Ждать Файл.СуществуетАсинх();
	
	Если ФайлСуществует = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СоответствиеИменМетаданных = СоответствиеИменСущностей("ЕдинственноеАнглийский", "МножественноеРусский");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла, , , "UTF-8");
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя <> "Metadata" Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяМетаданных = ЧтениеXML.ПолучитьАтрибут("name");
		ЧастиИмени = СтрРазделить(ИмяМетаданных, ".");
		
		Если СоответствиеИменМетаданных[ЧастиИмени[0]] = Неопределено Тогда
			ЧтениеXML.Пропустить();
			Продолжить;
		КонецЕсли;
		
		Если ЧастиИмени.Количество() > 3 И СоответствиеИменМетаданных[ЧастиИмени[2]] = Неопределено Тогда
			ЧтениеXML.Пропустить();
			Продолжить;
		КонецЕсли;
		
		Если Не (ЧастиИмени.Количество() = 2 Или ЧастиИмени.Количество() = 4) Тогда
			ЧтениеXML.Пропустить();
			Продолжить;
		КонецЕсли;
		
		Класс = СоответствиеИменМетаданных[ЧастиИмени[0]];
		_Объект = ЧастиИмени[1];
		Ключ = СтрШаблон("%1.%2", Класс, _Объект);
		
		Если ЧастиИмени.Количество() = 4 Тогда
			
			Класс = СоответствиеИменМетаданных[ЧастиИмени[2]];
			_Объект = ЧастиИмени[3];
			Ключ = СтрШаблон("%1.%2", Ключ, _Объект);
			
		КонецЕсли;
		
		Если Приемник.НайтиСтроки(Новый Структура("Ключ", Ключ)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = Приемник.Добавить();
		НоваяЗапись.Ключ = Ключ;
		НоваяЗапись.ПолноеИмя = ИмяМетаданных;
		НоваяЗапись.Класс = Класс;
		НоваяЗапись.Объект = _Объект;
		НоваяЗапись.Идентификатор = ЧтениеXML.ПолучитьАтрибут("id");
		
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Асинх Процедура ЗаполнитьОбъектыКонфигурацииИзФайлаВерсий()
	
	Объект.ОбъектыКонфигурации.Очистить();
	
	Если Не(Ждать ПрочитатьФайлВерсий(Объект.ОбъектыКонфигурации)) Тогда
		
		ВыгрузитьФайлВерсий();
		ЗаполнитьОбъектыКонфигурацииИзФайлаВерсий();
		Возврат;
		
	КонецЕсли;
	
	НоваяЗапись = Объект.ОбъектыКонфигурации.Добавить();
	НоваяЗапись.Класс = "ОбщиеМодули";
	НоваяЗапись.Объект = Объект.ИмяПрограммы;
	НоваяЗапись.Ключ = СтрШаблон("%1.%2", НоваяЗапись.Класс, НоваяЗапись.Объект);
	НоваяЗапись.ПолноеИмя = СтрШаблон("CommonModule.%1", Объект.ИмяПрограммы);
	НоваяЗапись.Идентификатор = XMLСтрока(Новый УникальныйИдентификатор);
	
КонецПроцедуры

#Область СозданиеФайловРасширения

&НаКлиенте
Процедура СформироватьФайлыРасширения()
	
	ДанныеЗаполнения = ДанныеЗаполненияДляВыбранныхМетодов();
	КлючиПодчиненныхОбъектов = МассивКлючей(ДанныеЗаполнения);
	
	ФайлыКЗаписи.Очистить();
	
	СформироватьФайлКонфигурации(КлючиПодчиненныхОбъектов);
	СформироватьФайлВерсииОбъектов(ДанныеЗаполнения);
	//СформироватьФайлОсновнойРоли();
	СформироватьФайлЯзыкаКонфигурации();
	СформироватьФайлыПрограммы();
	
	СформироватьФайлыМодулей(ДанныеЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Функция МассивКлючей(Коллекция)
	
	МассивКлючей = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из Коллекция Цикл
		МассивКлючей.Добавить(ЭлементКоллекции.Ключ);
	КонецЦикла;
	
	Возврат МассивКлючей;
	
КонецФункции

&НаКлиенте
Функция ДанныеЗаполненияДляВыбранныхМетодов()
	
	ДанныеЗаполнения = Новый Соответствие;
	
	ПоАнглийскиВЕдинственномЧисле = СоответствиеИменСущностей("ЕдинственноеРусский", "ЕдинственноеАнглийский");
	ЕдинственноеЧисло = СоответствиеИменСущностей("МножественноеРусский", "ЕдинственноеРусский");
	
	Для Каждого Метод Из ВыбранныеМетоды Цикл
		
		Ключ = Метод.КлючОбъекта;
		
		ЧастиКлюча = СтрРазделить(Ключ, ".");
		
		Если ЧастиКлюча.Количество() = 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(НСтр("ru = 'Не указан ключ объекта для метода <%1>. Метод пропущен'"), Метод.Метод);
			Сообщение.Сообщить();
			Продолжить;
			
		КонецЕсли;
		
		Если ЧастиКлюча.Количество() > 3
			И Не ЗначениеЗаполнено(Метод.Событие) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(НСтр("ru = 'Не указано событие для метода <%1>. Метод пропущен'"), Метод.Метод);
			Сообщение.Сообщить();
			Продолжить;
			
		КонецЕсли;
		
		Модуль = "";
		
		Если ЧастиКлюча.Количество() = 1 Тогда
			
			Класс = "ОбщиеМодули";
			_Объект = ЧастиКлюча[0];
			
		Иначе
			
			Класс = ЧастиКлюча[0];
			_Объект = ЧастиКлюча[1];
			Модуль = ЧастиКлюча[2];
			
		КонецЕсли;
		
		КлючОбъекта = СтрШаблон("%1.%2", Класс, _Объект);
		ОписаниеОбъекта = ДанныеЗаполнения[КлючОбъекта];
		
		Если ОписаниеОбъекта = Неопределено Тогда
			ОписаниеОбъекта = НовоеОписаниеОбъекта(Класс, _Объект);
		КонецЕсли;
		
		ИмяФайлаМодуля = ФайлМодуля(Класс, Модуль);
		
		Если ИмяФайлаМодуля = Неопределено Тогда
			// тогда это не модуль, а подчиненный объект
			
			ОписаниеПодчиненногоОбъекта = ОписаниеОбъекта.ПодчиненныеОбъекты[Модуль];
			
			Если ОписаниеПодчиненногоОбъекта = Неопределено Тогда
				
				КлючПодчиненногоОбъекта = СтрШаблон("%1.%2.%3", Класс, _Объект, Модуль);
				ОписаниеПодчиненногоОбъекта = НовоеОписаниеПодчиненногоОбъекта(Класс, _Объект, Модуль);
				
				Если ОписаниеПодчиненногоОбъекта = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ОписаниеПодчиненногоОбъекта.ИдентификаторРасширяемогоОбъекта = ИдентификаторОбъекта(КлючПодчиненногоОбъекта);
				
			КонецЕсли;
			
			ДобавитьОписаниеМетодаВКоллекцию(ОписаниеПодчиненногоОбъекта.Методы, Метод);
			
			Если ОписаниеПодчиненногоОбъекта.Тип = "Форма" Тогда
				
				Если ЧастиКлюча.Количество() = 3 И ЗначениеЗаполнено(Метод.Событие) Тогда
					
					ОписаниеПодчиненногоОбъекта.События.Добавить(НовоеОписаниеСобытия(Метод));
					
				КонецЕсли;
				
				Если ЧастиКлюча.Количество() = 4 Тогда
					
					ИмяЭлемента = ЧастиКлюча[3];
					
					ОписаниеЭлементаФормы = ОписаниеПодчиненногоОбъекта.Элементы[ИмяЭлемента];
					
					Если ОписаниеЭлементаФормы = Неопределено Тогда
						
						Форма = ПолучитьФорму(СтрШаблон("%1.%2.Форма.%3", ЕдинственноеЧисло[Класс], _Объект, Модуль));
						
						Если Форма = Неопределено Тогда
							// если в обработчике ПриСозданииНаСервере установлен признак отказа от создания формы.
							Продолжить;
						КонецЕсли;
						
						ТипЭлемента = СтрЗаменить(Строка(ТипЗнч(Форма.Элементы.Найти(ИмяЭлемента))), " ", "");
						
						ОписаниеЭлементаФормы = Новый Структура;
						ОписаниеЭлементаФормы.Вставить("Тип", ТипЭлемента);
						ОписаниеЭлементаФормы.Вставить("События", Новый Массив);
						
					КонецЕсли;
					
					// есть некоторые ошибки при расширении событий таблицы формы https://github.com/1C-Company/1c-edt-issues/issues/1517
					Если ВРег(ОписаниеЭлементаФормы.Тип) = "ПОЛЕФОРМЫ" Тогда
						
						ОписаниеЭлементаФормы.События.Добавить(НовоеОписаниеСобытия(Метод));
						ОписаниеПодчиненногоОбъекта.Элементы.Вставить(ИмяЭлемента, ОписаниеЭлементаФормы);
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ОписаниеОбъекта.ДанныеЗаполнения.ПодчиненныеОбъекты[Модуль] = Неопределено Тогда
					
					ПодчиненныйОбъект = СтрШаблон("<Form>%1</Form>", Модуль);
					ОписаниеОбъекта.ДанныеЗаполнения.ПодчиненныеОбъекты.Вставить(Модуль, ПодчиненныйОбъект);
					
				КонецЕсли;
				
			Иначе
				
				Если ОписаниеОбъекта.ДанныеЗаполнения.ПодчиненныеОбъекты[Модуль] = Неопределено Тогда
					
					ОписаниеПодчиненногоОбъекта.Вставить("Имя", Модуль);
					ПодчиненныйОбъект = ЗаполнитьШаблон("ШаблонОписания_Команды", ОписаниеПодчиненногоОбъекта);
					ОписаниеОбъекта.ДанныеЗаполнения.ПодчиненныеОбъекты.Вставить(Модуль, ПодчиненныйОбъект);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ОписаниеОбъекта.ПодчиненныеОбъекты.Вставить(Модуль, ОписаниеПодчиненногоОбъекта);
			
		Иначе
			
			ОписаниеМодуля = ОписаниеОбъекта.Модули[Модуль];
			
			Если ОписаниеМодуля = Неопределено Тогда
				
				ФайлМодуля = СтрШаблон("%1%2%3%4",
					ОписаниеКласса(Класс).БазовыйПуть,
					ЗначениеНастройки("РазделительДиректорий"),
					_Объект,
					ИмяФайлаМодуля);
				
				ОписаниеМодуля = Новый Структура;
				ОписаниеМодуля.Вставить("Файл", ФайлМодуля);
				ОписаниеМодуля.Вставить("Методы", Новый Массив);
				
			КонецЕсли;
			
			ДобавитьОписаниеМетодаВКоллекцию(ОписаниеМодуля.Методы, Метод);
			
			ОписаниеОбъекта.Модули.Вставить(Модуль, ОписаниеМодуля);
			
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить(КлючОбъекта, ОписаниеОбъекта);
		
	КонецЦикла;
	
	Для Каждого ОписаниеОбъекта Из ДанныеЗаполнения Цикл
		ОписаниеОбъекта.Значение.ДанныеЗаполнения.ПодчиненныеОбъекты = СтрСоединить(МассивЗначений(ОписаниеОбъекта.Значение.ДанныеЗаполнения.ПодчиненныеОбъекты), Символы.ПС);
	КонецЦикла;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

&НаКлиенте
Функция МассивЗначений(Коллекция)
	
	МассивЗначений = Новый Массив;
	
	Для Каждого ЭлементиКоллекции Из Коллекция Цикл
		МассивЗначений.Добавить(ЭлементиКоллекции.Значение);
	КонецЦикла;
	
	Возврат МассивЗначений;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьОписаниеМетодаВКоллекцию(Коллекция, Метод)
	
	ОписаниеМетода = Новый Структура("Аннотация,ДирективаКомпиляции,ТипМетода,Метод,РасширяемыйМетод,Параметры,Экспорт,Событие");
	ЗаполнитьЗначенияСвойств(ОписаниеМетода, Метод);
	Коллекция.Добавить(ОписаниеМетода);
	
КонецПроцедуры

&НаКлиенте
Функция НовоеОписаниеОбъекта(Класс, _Объект)
	
	ОписаниеКласса = ОписаниеКласса(Класс);
	ФайлОписания = СтрШаблон("%1%2%3",
		ОписаниеКласса.БазовыйПуть,
		ЗначениеНастройки("РазделительДиректорий"),
		СтрЗаменить(ОписаниеКласса.ФайлОписания, "{Объект}", _Объект));
	
	ДанныеЗаполнения = ДанныеЗаполненияОбъекта(ОписаниеКласса, _Объект);
	
	Если ДанныеЗаполнения.Свойство("ИдентификаторРасширяемогоОбъекта") Тогда
		Ключ = СтрШаблон("%1.%2", Класс, _Объект);
		ДанныеЗаполнения.ИдентификаторРасширяемогоОбъекта = ИдентификаторОбъекта(Ключ);
	КонецЕсли;
	
	ОписаниеОбъекта = Новый Структура;
	ОписаниеОбъекта.Вставить("ФайлОписания", ФайлОписания);
	ОписаниеОбъекта.Вставить("ШаблонОписания", ОписаниеКласса.ШаблонОписания);
	ОписаниеОбъекта.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
	ОписаниеОбъекта.Вставить("Модули", Новый Соответствие);
	ОписаниеОбъекта.Вставить("ПодчиненныеОбъекты", Новый Соответствие);
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

&НаСервере
Функция ДанныеЗаполненияОбъекта(Знач ОписаниеКласса, Знач _Объект)
	
	ДанныеЗаполнения = Новый Структура(ОписаниеКласса.ПараметрыШаблона);
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Метаданные[ОписаниеКласса.Класс][_Объект]);
	
	Если ДанныеЗаполнения.Свойство("ПодчиненныеОбъекты") Тогда
		ДанныеЗаполнения.ПодчиненныеОбъекты = Новый Соответствие;
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

&НаСервере 
Функция НовоеОписаниеПодчиненногоОбъекта(РодительскийКласс, РодительскийОбъект, _Объект)
	
	ОписаниеРодительскогоКласса = ОписаниеКласса(РодительскийКласс);
	
	Если ОписаниеРодительскогоКласса.Формы 
		И Метаданные[РодительскийКласс][РодительскийОбъект].Формы.Найти(_Объект) <> Неопределено Тогда
		
		Возврат НовоеОписаниеФормы(ОписаниеРодительскогоКласса, РодительскийОбъект, _Объект);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НовоеОписаниеФормы(ОписаниеРодительскогоКласса, РодительскийОбъект, _Объект)
	
	ОписаниеПодчиненногоОбъекта = Новый Структура;
	РазделитьДиректорий = ЗначениеНастройкиНаСервере("РазделительДиректорий");
	
	ОписаниеКлассаФормы = ОписаниеКласса("Формы");
	
	БазовыйПуть = СтрШаблон("%1%2%3%2%4%2",
		ОписаниеРодительскогоКласса.БазовыйПуть,
		РазделитьДиректорий,
		РодительскийОбъект,
		ОписаниеКлассаФормы.БазовыйПуть);
	
	ФайлОписания = СтрШаблон("%1%2",
		БазовыйПуть,
		СтрЗаменить(ОписаниеКлассаФормы.ФайлОписания, "{Объект}", _Объект));
	
	ФайлФормы = СтрШаблон("%1%2%3",
		БазовыйПуть,
		_Объект,
		СтрЗаменить("\Ext\Form.xml", "\", РазделитьДиректорий));
	
	ФайлМодуля = СтрШаблон("%1%2%3",
		БазовыйПуть,
		_Объект,
		СтрЗаменить(ФайлМодуляНаСервере("Формы", ""), "\", РазделитьДиректорий));
	
	ОписаниеПодчиненногоОбъекта.Вставить("Тип", "Форма");
	ОписаниеПодчиненногоОбъекта.Вставить("ИдентификаторРасширяемогоОбъекта");
	ОписаниеПодчиненногоОбъекта.Вставить("ФайлОписания", ФайлОписания);
	ОписаниеПодчиненногоОбъекта.Вставить("ШаблонОписания", ОписаниеКлассаФормы.ШаблонОписания);
	ОписаниеПодчиненногоОбъекта.Вставить("ФайлФормы", ФайлФормы);
	ОписаниеПодчиненногоОбъекта.Вставить("ШаблонФайлаФормы", "ШаблонФайлаФормы");
	ОписаниеПодчиненногоОбъекта.Вставить("ФайлМодуля", ФайлМодуля);
	ОписаниеПодчиненногоОбъекта.Вставить("События", Новый Массив);
	ОписаниеПодчиненногоОбъекта.Вставить("Методы", Новый Массив);
	ОписаниеПодчиненногоОбъекта.Вставить("Элементы", Новый Соответствие);
	
	Возврат ОписаниеПодчиненногоОбъекта;
	
КонецФункции

&НаКлиенте
Функция НовоеОписаниеСобытия(ОписаниеМетода)
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Имя", ОписаниеМетода.Событие);
	ОписаниеСобытия.Вставить("ТипВызова", ОписаниеМетода.Аннотация);
	ОписаниеСобытия.Вставить("Метод", ОписаниеМетода.Метод);
	
	Возврат ОписаниеСобытия;
	
КонецФункции

&НаСервере
Функция ТекстИзМакета(Знач ИмяМакета)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Возврат Обработка.ТекстИзМакета(ИмяМакета);
	
КонецФункции

&НаКлиенте
Функция ФайлМодуля(Класс, Модуль)
	
	ИмяФайла = Неопределено;
	
	ПараметрыОтбора = Новый Структура("Класс, Модуль", Класс, Модуль);
	НайденныеМодулиКлассов = Объект.МодулиКлассов.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеМодулиКлассов.Количество() > 0 Тогда
		ИмяФайла = НайденныеМодулиКлассов[0].ИмяФайла;
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции

&НаСервере
Функция ФайлМодуляНаСервере(Класс, Модуль)
	
	ИмяФайла = Неопределено;
	
	ПараметрыОтбора = Новый Структура("Класс, Модуль", Класс, Модуль);
	НайденныеМодулиКлассов = Объект.МодулиКлассов.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеМодулиКлассов.Количество() > 0 Тогда
		ИмяФайла = НайденныеМодулиКлассов[0].ИмяФайла;
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции

&НаСервере
Функция ОписаниеКласса(Знач Класс)
	
	ОписаниеКласса = Неопределено;
	ПараметрыОтбора = Новый Структура("Класс", Класс);
	НайденныеСтроки = Объект.ОписанияКлассов.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ТаблицаОписания = Объект.ОписанияКлассов.Выгрузить(НайденныеСтроки);
		ОписаниеКласса = Новый Структура;
		
		Для Каждого Колонка Из ТаблицаОписания.Колонки Цикл
			ОписаниеКласса.Вставить(Колонка.Имя, ТаблицаОписания[0][Колонка.Имя]);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОписаниеКласса;
	
КонецФункции

&НаКлиенте
Процедура СформироватьФайлыПрограммы()
	
	Класс = "ОбщиеМодули";
	ФайлМодуля = ФайлМодуля(Класс, "");
	
	// Чпоньк
	ИмяОбъекта = Объект.ИмяПрограммы;
	ДанныеЗаполнения = НовыеДанныеЗаполненияОбщегоМодуля();
	ДанныеЗаполнения.Имя = ИмяОбъекта;
	ДанныеЗаполнения.ВызовСервера = Истина;
	
	ИмяФайлаОписания = СтрШаблон("CommonModules\%1.xml", ИмяОбъекта);
	Содержимое = ЗаполнитьШаблон("ШаблонОписания_ОбщиеМодули", ДанныеЗаполнения);
	ЗаписатьВФайл(ИмяФайлаОписания, Содержимое);
	
	ИмяФайлаМодуля = СтрШаблон("CommonModules\%1%2", ИмяОбъекта, ФайлМодуля);
	Содержимое = ЗаполнитьШаблон(ИмяОбъекта, Новый Структура);
	ЗаписатьВФайл(ИмяФайлаМодуля, Содержимое);
	
	// ЧпонькКлиент
	ИмяОбъекта = СтрШаблон("%1Клиент", Объект.ИмяПрограммы);
	ДанныеЗаполнения = НовыеДанныеЗаполненияОбщегоМодуля();
	ДанныеЗаполнения.Имя = ИмяОбъекта;
	ДанныеЗаполнения.Сервер = Ложь;
	ДанныеЗаполнения.КлиентУправляемоеПриложение = Истина;
	ДанныеЗаполнения.КлиентОбычноеПриложение = Истина;
	
	ИмяФайлаОписания = СтрШаблон("CommonModules\%1.xml", ИмяОбъекта);
	Содержимое = ЗаполнитьШаблон("ШаблонОписания_ОбщиеМодули", ДанныеЗаполнения);
	ЗаписатьВФайл(ИмяФайлаОписания, Содержимое);
	
	ИмяФайлаМодуля = СтрШаблон("CommonModules\%1%2", ИмяОбъекта, ФайлМодуля);
	Содержимое = ЗаполнитьШаблон(ИмяОбъекта, Новый Структура);
	ЗаписатьВФайл(ИмяФайлаМодуля, Содержимое);
	
	// ЧпонькКлиентГлобальный
	ИмяОбъекта = СтрШаблон("%1КлиентГлобальный", Объект.ИмяПрограммы);
	ДанныеЗаполнения = НовыеДанныеЗаполненияОбщегоМодуля();
	ДанныеЗаполнения.Имя = ИмяОбъекта;
	ДанныеЗаполнения.Сервер = Ложь;
	ДанныеЗаполнения.КлиентУправляемоеПриложение = Истина;
	ДанныеЗаполнения.КлиентОбычноеПриложение = Истина;
	ДанныеЗаполнения.Глобальный = Истина;
	
	ИмяФайлаОписания = СтрШаблон("CommonModules\%1.xml", ИмяОбъекта);
	Содержимое = ЗаполнитьШаблон("ШаблонОписания_ОбщиеМодули", ДанныеЗаполнения);
	ЗаписатьВФайл(ИмяФайлаОписания, Содержимое);
	
	ИмяФайлаМодуля = СтрШаблон("CommonModules\%1%2", ИмяОбъекта, ФайлМодуля);
	Содержимое = ЗаполнитьШаблон(ИмяОбъекта, Новый Структура);
	ЗаписатьВФайл(ИмяФайлаМодуля, Содержимое);
	
	// Модуль управляемого приложения
	
	ИмяФайлаМодуля = "Ext\ManagedApplicationModule.bsl";
	Содержимое = ЗаполнитьШаблон("МодульУправляемогоПриложения", Новый Структура("ИмяПрограммы", Объект.ИмяПрограммы));
	ЗаписатьВФайл(ИмяФайлаМодуля, Содержимое);
	
КонецПроцедуры

&НаКлиенте
Функция НовыеДанныеЗаполненияОбщегоМодуля()
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Имя", "");
	ДанныеЗаполнения.Вставить("Глобальный", Ложь);
	ДанныеЗаполнения.Вставить("КлиентУправляемоеПриложение", Ложь);
	ДанныеЗаполнения.Вставить("Сервер", Истина);
	ДанныеЗаполнения.Вставить("ВнешнееСоединение", Ложь);
	ДанныеЗаполнения.Вставить("КлиентОбычноеПриложение", Ложь);
	ДанныеЗаполнения.Вставить("ВызовСервера", Ложь);
	ДанныеЗаполнения.Вставить("Привилегированный", Ложь);
	ДанныеЗаполнения.Вставить("ИдентификаторРасширяемогоОбъекта", Новый УникальныйИдентификатор);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

&НаКлиенте
Функция КлючМодуля(Класс, Модуль)
	Возврат СтрШаблон("%1.%2", Класс, Модуль);
КонецФункции

&НаКлиенте
Процедура СформироватьФайлЯзыкаКонфигурации()
	
	Лог("СформироватьФайлЯзыкаКонфигурации()");
	
	ИмяФайла = "Languages\Русский.xml";
	
	ИдентификаторРасширяемогоОбъекта = ИдентификаторОбъектаМетаданных("Языки", "Русский");
	
	ДанныеЗаполнения = Новый Структура("ИдентификаторРасширяемогоОбъекта", ИдентификаторРасширяемогоОбъекта);
	Содержимое = ЗаполнитьШаблон("ШаблонОписания_Языки", ДанныеЗаполнения);
	
	ЗаписатьВФайл(ИмяФайла, Содержимое);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьФайлВерсииОбъектов(ДанныеЗаполнения)
	
	Лог("СформироватьФайлВерсииОбъектов()");
	
	ИмяФайла = "ConfigDumpInfo.xml";
	
	Содержимое = ЗаполнитьШаблон("ШаблонФайлаВерсий");
	ЗаписатьВФайл(ИмяФайла, Содержимое);
	
КонецПроцедуры

&НаКлиенте
Функция ИдентификаторОбъектаМетаданных(Класс, ИмяОбъекта)
	
	ИдентификаторОбъекта = "";
	
	ПараметрыОтбора = Новый Структура("Класс,Объект", Класс, ИмяОбъекта);
	ИдентификаторыОбъектов = Объект.ОбъектыКонфигурации.НайтиСтроки(ПараметрыОтбора);
	
	Если ИдентификаторыОбъектов.Количество() > 0 Тогда
		ИдентификаторОбъекта = ИдентификаторыОбъектов[0].Идентификатор;
	КонецЕсли;
	
	Возврат ИдентификаторОбъекта;
	
КонецФункции

&НаКлиенте
Функция ИдентификаторОбъекта(Ключ)
	
	ИдентификаторОбъекта = "";
	
	ПараметрыОтбора = Новый Структура("Ключ", Ключ);
	ИдентификаторыОбъектов = Объект.ОбъектыКонфигурации.НайтиСтроки(ПараметрыОтбора);
	
	Если ИдентификаторыОбъектов.Количество() > 0 Тогда
		ИдентификаторОбъекта = ИдентификаторыОбъектов[0].Идентификатор;
	КонецЕсли;
	
	Возврат ИдентификаторОбъекта;
	
КонецФункции

&НаКлиенте
Процедура СформироватьФайлКонфигурации(КлючиПодчиненныхОбъектов)
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Имя", Объект.ИмяПрограммы);
	ДанныеЗаполнения.Вставить("Версия", ВерсияПрограммы());
	ДанныеЗаполнения.Вставить("Синоним", Объект.ИмяПрограммы);
	ДанныеЗаполнения.Вставить("Префикс", Объект.ИмяПрограммы + "_");
	ДанныеЗаполнения.Вставить("ПодчиненныеОбъекты", ОписаниеПодчиненныхОбъектовКонфигурации(КлючиПодчиненныхОбъектов));
	ДанныеЗаполнения.Вставить("Язык", "Русский");
	ДанныеЗаполнения.Вставить("РежимСовместимости", РежимСовместимости());
	
	Содержимое = ЗаполнитьШаблон("ШаблонОписания_Конфигурация", ДанныеЗаполнения);
	ЗаписатьВФайл("Configuration.xml", Содержимое);
	
КонецПроцедуры

&НаСервере
Функция РежимСовместимости()
	Возврат СтрЗаменить(Метаданные.РежимСовместимости, "Версия", "Version");
КонецФункции

&НаСервере
Функция ВерсияПрограммы()
	
	НайденныеРасширения = РасширенияКонфигурации.Получить(Новый Структура("Имя", Объект.ИмяПрограммы));
	
	Если НайденныеРасширения.Количество() = 0 Или ПустаяСтрока(НайденныеРасширения[0].Версия) Тогда
		Версия = "1.0.1.1";
	Иначе
		Версия = УвеличитьВерсию(НайденныеРасширения[0].Версия, "0.0.1.0");
	КонецЕсли;
	
	Возврат Версия;
	
КонецФункции

&НаСервере
Функция УвеличитьВерсию(Версия, Увеличение, Разделитель = ".")
	
	ЧастиВерсии = СтрРазделить(Версия, Разделитель);
	ЧастиУвеличения = СтрРазделить(Увеличение, Разделитель);
	ЧастиНовойВерсии = Новый Массив;
	
	Для Сч = 0 По ЧастиВерсии.ВГраница() Цикл
		
		ЧастьУвеличения = 0;
		
		Если Сч <= ЧастиУвеличения.ВГраница() Тогда
			ЧастьУвеличения = ЧастиУвеличения[Сч];
		КонецЕсли;
		
		ЧастиНовойВерсии.Добавить(Строка(Число(ЧастиВерсии[Сч]) + Число(ЧастьУвеличения)));
		
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиНовойВерсии, Разделитель);
	
КонецФункции

&НаКлиенте
Процедура СформироватьФайлыМодулей(ДанныеЗаполнения)
	
	Лог("СформироватьФайлыМодулей()");
	
	Для Каждого _Объект Из ДанныеЗаполнения Цикл
		СформироватьФайлМодуляОбъекта(_Объект.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаВТекущейОС(ИмяФайла)
	
	РазделительДиректорий = ЗначениеНастройки("РазделительДиректорий");
	ДвойнойРазделитель = СтрШаблон("%1%1", РазделительДиректорий);
	
	ИмяФайла = СтрЗаменить(СтрЗаменить(ИмяФайла, "/", РазделительДиректорий), "\", РазделительДиректорий);
	ИмяФайла = СтрЗаменить(ИмяФайла, ДвойнойРазделитель, РазделительДиректорий);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьФайлМодуляОбъекта(ОписаниеОбъекта)
	
	СоответствиеИменМетаданных = СоответствиеИменСущностей("МножественноеРусский", "МножественноеАнглийский");
	
	Содержимое = ЗаполнитьШаблон(ОписаниеОбъекта.ШаблонОписания, ОписаниеОбъекта.ДанныеЗаполнения);
	ЗаписатьВФайл(ОписаниеОбъекта.ФайлОписания, Содержимое);
	
	Для Каждого Модуль Из ОписаниеОбъекта.Модули Цикл
		
		Содержимое = СформироватьТекстМодуля(Модуль.Значение.Методы);
		ЗаписатьВФайл(Модуль.Значение.Файл, Содержимое);
		
	КонецЦикла;
	
	ШаблонОписанияСобытия = "<Event name=""%1"" callType=""%2"">%3_%4</Event>";
	ПоАнглийски = СоответствиеИменСущностей("ЕдинственноеРусский", "ЕдинственноеАнглийский");
	
	Для Каждого ПодчиненныйОбъект Из ОписаниеОбъекта.ПодчиненныеОбъекты Цикл
		
		ОписаниеПодчиненногоОбъекта = ПодчиненныйОбъект.Значение;
		
		Если ОписаниеПодчиненногоОбъекта.Тип = "Форма" Тогда
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("Имя", ПодчиненныйОбъект.Ключ);
			ДанныеЗаполнения.Вставить("ИдентификаторРасширяемогоОбъекта", ОписаниеПодчиненногоОбъекта.ИдентификаторРасширяемогоОбъекта);
			
			Содержимое = ЗаполнитьШаблон(ОписаниеПодчиненногоОбъекта.ШаблонОписания, ДанныеЗаполнения);
			ЗаписатьВФайл(ОписаниеПодчиненногоОбъекта.ФайлОписания, Содержимое);
			
			СобытияФормы = Новый Массив;
			
			Для Каждого СобытиеФормы Из ОписаниеПодчиненногоОбъекта.События Цикл
				
				ОписаниеСобытия = СтрШаблон(ШаблонОписанияСобытия,
					ПоАнглийски[СобытиеФормы.Имя],
					ПоАнглийски[СобытиеФормы.ТипВызова],
					Объект.ИмяПрограммы,
					СобытиеФормы.Метод);
				
				СобытияФормы.Добавить(ОписаниеСобытия);
				
			КонецЦикла;
			
			ЭлементыФормы = Новый Массив;
			РасширяемыеЭлементы = Новый Массив;
			Счетчик = 1;
			
			Для Каждого ЭлементОбъекта Из ОписаниеПодчиненногоОбъекта.Элементы Цикл
				
				ОписаниеРасширяемогоЭлемента = СтрШаблон("<InputField name=""%1"" id=""%2""/>",
					ЭлементОбъекта.Ключ,
					Счетчик);
				
				РасширяемыеЭлементы.Добавить(ОписаниеРасширяемогоЭлемента);
				
				СобытияЭлемента = Новый Массив;
				
				Для Каждого Событие Из ЭлементОбъекта.Значение.События Цикл
					
					ОписаниеСобытия = СтрШаблон(ШаблонОписанияСобытия,
						ПоАнглийски[Событие.Имя],
						ПоАнглийски[Событие.ТипВызова],
						Объект.ИмяПрограммы,
						Событие.Метод);
					
					СобытияЭлемента.Добавить(ОписаниеСобытия);
					
				КонецЦикла;
				
				ОписаниеЭлемента = СтрШаблон("<InputField name=""%1"" id=""%2""><Events>%3</Events></InputField>",
					ЭлементОбъекта.Ключ,
					Счетчик,
					СтрСоединить(СобытияЭлемента, Символы.ПС));
				
				ЭлементыФормы.Добавить(ОписаниеЭлемента);
				
				Счетчик = Счетчик + 1;
				
			КонецЦикла;
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("СобытияФормы", СтрСоединить(СобытияФормы, Символы.ПС));
			ДанныеЗаполнения.Вставить("Элементы", СтрСоединить(ЭлементыФормы, Символы.ПС));
			ДанныеЗаполнения.Вставить("РасширяемыеЭлементы", СтрСоединить(РасширяемыеЭлементы, Символы.ПС));
			
			Содержимое = ЗаполнитьШаблон(ОписаниеПодчиненногоОбъекта.ШаблонФайлаФормы, ДанныеЗаполнения);
			ЗаписатьВФайл(ОписаниеПодчиненногоОбъекта.ФайлФормы, Содержимое);
			
			Содержимое = СформироватьТекстМодуля(ОписаниеПодчиненногоОбъекта.Методы);
			ЗаписатьВФайл(ОписаниеПодчиненногоОбъекта.ФайлМодуля, Содержимое);
			
		Иначе
			
			// TODO
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьТекстМодуля(ОписанияМетодов)
	
	ШаблонФункции = 
	"%1
	|Функция %2(%3)%4
	|	
	|	МеткаВозврата = Строка(Новый УникальныйИдентификатор);
	|	Результат_%5 = Неопределено;
	|	КодМетода = %6.КодЗамещающегоМетода(""%7"", МеткаВозврата, ""Результат_%5"");
	|	
	|	Попытка
	|		Выполнить(КодМетода);
	|	Исключение
	|		ТекстИсключения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	|		Если ТекстИсключения <> МеткаВозврата Тогда
	|			ВызватьИсключение;
	|		КонецЕсли;
	|	КонецПопытки;
	|	
	|	Возврат Результат_%5;
	|	
	|КонецФункции";
	
	ШаблонПроцедуры = 
	"%1
	|Процедура %2(%3)%4
	|	
	|	МеткаВозврата = Строка(Новый УникальныйИдентификатор);
	|	КодМетода = %5.КодЗамещающегоМетода(""%6"", МеткаВозврата);
	|	
	|	Попытка
	|		Выполнить(КодМетода);
	|	Исключение
	|		ТекстИсключения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	|		Если ТекстИсключения <> МеткаВозврата Тогда
	|			ВызватьИсключение;
	|		КонецЕсли;
	|	КонецПопытки;
	|	
	|КонецПроцедуры";
	
	ТекстыМетодов = Новый Массив;
	
	Для Каждого ОписаниеМетода Из ОписанияМетодов Цикл
		
		ПараметрыМетода = СтрЗаменить(СтрЗаменить(СтрЗаменить(ОписаниеМетода.Параметры, " ", ""), "(", ""), ")", "");
		АннотацииИДирективы = Новый Массив;
		ИмяМетода = СтрШаблон("%1_%2", Объект.ИмяПрограммы, ОписаниеМетода.Метод);
		
		Если Не ЗначениеЗаполнено(ОписаниеМетода.Событие) Тогда
			
			Если ЗначениеЗаполнено(ОписаниеМетода.РасширяемыйМетод) Тогда
				АннотацииИДирективы.Добавить(СтрШаблон("&%1(""%2"")", ОписаниеМетода.Аннотация, ОписаниеМетода.РасширяемыйМетод));
			Иначе
				АннотацииИДирективы.Добавить(СтрШаблон("&Вместо(""%1"")", ОписаниеМетода.Метод));
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеМетода.ДирективаКомпиляции) Тогда
			АннотацииИДирективы.Добавить(СтрШаблон("&%1", ОписаниеМетода.ДирективаКомпиляции));
		КонецЕсли;
		
		Если ВРег(ОписаниеМетода.ТипМетода) = ВРег("Процедура") Тогда
			
			ТекстТелаМетода = СтрШаблон(ШаблонПроцедуры,
				СтрСоединить(АннотацииИДирективы, Символы.ПС),
				ИмяМетода,
				ПараметрыМетода,
				?(ОписаниеМетода.Экспорт, " Экспорт", ""),
				Объект.ИмяПрограммы,
				ОписаниеМетода.Метод);
			
		Иначе
			
			ТекстТелаМетода = СтрШаблон(ШаблонФункции,
				СтрСоединить(АннотацииИДирективы, Символы.ПС),
				ИмяМетода,
				ПараметрыМетода,
				?(ОписаниеМетода.Экспорт, "Экспорт", ""),
				СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""),
				Объект.ИмяПрограммы,
				ОписаниеМетода.Метод);
			
		КонецЕсли;
		
		ТекстыМетодов.Добавить(ТекстТелаМетода);
		
	КонецЦикла;
	
	Возврат СтрСоединить(ТекстыМетодов, Символы.ПС + Символы.ПС);
	
КонецФункции

&НаСервере
Функция ОписаниеПодчиненныхОбъектовКонфигурации(КлючиПодчиненныхОбъектов)
	
	ПодчиненныеОбъекты = Новый Массив;
	
	СоответствиеИменМетаданных = СоответствиеИменСущностей("МножественноеРусский", "ЕдинственноеАнглийский");
	
	Для Каждого КлючОбъекта Из КлючиПодчиненныхОбъектов Цикл
		
		ЧастиКлюча = СтрРазделить(КлючОбъекта, ".");
		
		ОписаниеОбъекта = СтрШаблон("<%1>%2</%1>", СоответствиеИменМетаданных[ЧастиКлюча[0]], ЧастиКлюча[1]);
		ПодчиненныеОбъекты.Добавить(ОписаниеОбъекта);
		
	КонецЦикла;
	
	Возврат СтрСоединить(ПодчиненныеОбъекты, Символы.ПС);
	
КонецФункции

&НаСервере
Функция ЗаполнитьШаблон(ИмяШаблона, ДанныеЗаполнения = Неопределено)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	ТекстШаблона = Обработка.ПолучитьМакет(ИмяШаблона).ПолучитьТекст();
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат ТекстШаблона;
	КонецЕсли;
	
	Для Каждого ЭлементДанных Из ДанныеЗаполнения Цикл
		
		ПодстрокаПоиска = СтрШаблон("{%1}", ЭлементДанных.Ключ);
		ТекстШаблона = СтрЗаменить(ТекстШаблона, ПодстрокаПоиска, XMLСтрока(ЭлементДанных.Значение));
		
	КонецЦикла;
	
	КоличествоГенерируемыхИдентификаторов = СтрЧислоВхождений(ТекстШаблона, "Идентификатор_");
	
	Для Сч = 0 По КоличествоГенерируемыхИдентификаторов Цикл
		
		ПодстрокаПоиска = СтрШаблон("{Идентификатор_%1}", Формат(Сч, "ЧН=0; ЧГ="));
		ПодстрокаЗамены = Строка(Новый УникальныйИдентификатор);
		ТекстШаблона = СтрЗаменить(ТекстШаблона, ПодстрокаПоиска, ПодстрокаЗамены);
		
	КонецЦикла;
	
	Возврат ТекстШаблона;
	
КонецФункции

&НаКлиенте
Асинх Процедура ЗаписатьВФайл(ИмяФайла, Содержимое, Кодировка = Неопределено)
	
	АдресВыгрузкиРасширения = ЗначениеНастройки("АдресВыгрузкиРасширения");
	ИмяФайлаВТекущейОС(ИмяФайла);
	ПолныйПуть = СтрШаблон("%1\%2", АдресВыгрузкиРасширения, ИмяФайла);
	ИмяФайлаВТекущейОС(ПолныйПуть);
	
	Лог("ЗаписатьВФайл() " + ИмяФайла);
	
	НовыйФайлКЗаписи(ИмяФайла);
	КаталогиСозданы = Ждать СоздатьНедостающиеКаталоги(ПолныйПуть);
	
	Если КаталогиСозданы = Истина Тогда
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(Содержимое);
		ФайлЗаписан = Ждать ТекстовыйДокумент.ЗаписатьАсинх(ПолныйПуть, Кодировка);
		
		Если ФайлЗаписан = Истина Тогда
			ФайлКЗаписиЗаписан(ИмяФайла);
		КонецЕсли;
		
		Если ФайлЗаписан = Неопределено Тогда
			
			Файл = Новый Файл(ПолныйПуть);
			ФайлСуществует = Ждать Файл.СуществуетАсинх();
			
			Если ФайлСуществует = Истина Тогда
				ФайлКЗаписиЗаписан(ИмяФайла);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Функция СоздатьНедостающиеКаталоги(ИмяФайла)
	
	ИмяКаталога = Сред(ИмяФайла, 1, СтрНайти(ИмяФайла, "\", НаправлениеПоиска.СКонца));
	
	Каталог = Новый Файл(ИмяКаталога);
	КаталогСуществует = Ждать Каталог.СуществуетАсинх();
	
	Если КаталогСуществует = Ложь Тогда
		
		СозданныйКаталог = Ждать СоздатьКаталогАсинх(ИмяКаталога);
		
		Если СозданныйКаталог = ИмяКаталога Тогда
			Возврат Истина;
		Иначе
			Возврат СозданныйКаталог;
		КонецЕсли;
		
	Иначе
		
		Возврат КаталогСуществует;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура НовыйФайлКЗаписи(ИмяФайла)
	
	ФайлКЗаписи = ФайлыКЗаписи.Добавить();
	ФайлКЗаписи.ИмяФайла = ИмяФайла;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлКЗаписиЗаписан(ИмяФайла)
	
	ПараметрыОтбора = Новый Структура("ИмяФайла", ИмяФайла);
	НайденныеСтроки = ФайлыКЗаписи.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныеСтроки[0].Записан = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция СоответствиеИменСущностей(ПолеКлюч, ПолеЗначение)
	
	Соответствие = Новый Соответствие;
	
	Для Каждого ИменаКласса Из Объект.ИменаСущностей Цикл
		
		Если ЗначениеЗаполнено(ИменаКласса[ПолеЗначение]) Тогда
			Соответствие.Вставить(ИменаКласса[ПолеКлюч], ИменаКласса[ПолеЗначение]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

&НаСервере
Функция ПеревестиИмяСущности(Исходное)
	
	ПереводИмени = "";
	
	ЯзыкиДляПеревода = Новый Структура("Русский,Английский", "Английский", "Русский");
	
	ТаблицаИмен = Объект.ИменаСущностей.Выгрузить();
	
	Для Каждого Колонка Из ТаблицаИмен.Колонки Цикл
		
		НайденнаяСтрока = ТаблицаИмен.Найти(Исходное, Колонка.Имя);
		
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ЯзыкДляПеревода Из ЯзыкиДляПеревода Цикл
			
			Если СтрНайти(Колонка.Имя, ЯзыкДляПеревода.Ключ) > 0 Тогда
				
				ИмяКолонкиСПереводом = СтрЗаменить(Колонка.Имя, ЯзыкДляПеревода.Ключ, ЯзыкДляПеревода.Значение);
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПереводИмени = НайденнаяСтрока[ИмяКолонкиСПереводом];
		Прервать;
		
	КонецЦикла;
	
	Возврат ПереводИмени;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьФайлВерсий()
	
	СтрокаПодключения = СтрЗаменить(СтрокаСоединенияИнформационнойБазы(), """", """""");
	ИсполняемыйФайлПриложения = ЗначениеНастройки("ИсполняемыйФайлПриложения");
	КаталогВыгрузки = ЗначениеНастройки("КаталогВыгрузки");
	
	СтрокаКоманды = СтрШаблон("%1 DESIGNER /IBConnectionString ""%2"" /DumpConfigToFiles ""%3"" -configDumpInfoOnly",
		ИсполняемыйФайлПриложения,
		СтрокаПодключения,
		КаталогВыгрузки);
	
	Лог(СтрокаКоманды);
	КодВозврата = Неопределено;
	ЗапуститьПриложение(СтрокаКоманды, , Истина, КодВозврата);
	
	Если КодВозврата <> 0 Тогда
		ВызватьИсключение "Не удалось выгрузить файл конфигурации. Возможно конфигурация открыта другим пользователем в режиме конфигуратора";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Лог(Сообщение)
	
	НоваяЗапись = Журнал.Добавить();
	НоваяЗапись.Время = ТекущаяДата();
	НоваяЗапись.Сообщение = Сообщение;
	
КонецПроцедуры

&НаКлиенте
Асинх Функция ЗапуститьПриложенияПоследовательно(КомандыПриложений)
	
	ПриложенияВыполнены = Истина;
	
	Для Каждого Команда Из КомандыПриложений Цикл
		
		КодВозврата = Ждать ЗапуститьПриложениеАсинх(Команда, , Истина);
		
		Если КодВозврата <> 0 Тогда
			
			Лог(СтрШаблон("%1: ошибка", Команда));
			ПриложенияВыполнены = Ложь;
			Прервать;
			
		КонецЕсли;
		
		Лог(СтрШаблон("%1: выполнено", Команда)); 
		
	КонецЦикла;
	
	Возврат ПриложенияВыполнены;
	
КонецФункции

&НаКлиенте
Асинх Функция ВыбратьФайл(Фильтр, Режим)
	
	Файл = Неопределено;
	
	Диалог = Новый ДиалогВыбораФайла(Режим);
	Диалог.Фильтр = Фильтр;
	ВыбранныеФайлы = Ждать Диалог.ВыбратьАсинх();
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Файл = Новый Файл(ВыбранныеФайлы[0]);
	КонецЕсли;
	
	Возврат Файл;
	
КонецФункции

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборВСвязаннойТаблице("ВыбранныеМетоды.Файл", "Файлы.Идентификатор");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборВСвязаннойТаблице(ПолеОтбора, ПолеЗначения)
	
	ЧастиПоляОтбора = СтрРазделить(ПолеОтбора, ".");
	ИмяТаблицы = ЧастиПоляОтбора[0];
	ИмяПоля = ЧастиПоляОтбора[1];
	
	ЧастиПоляЗначения = СтрРазделить(ПолеЗначения, ".");
	ИмяТаблицыИсточника = ЧастиПоляЗначения[0];
	ИмяПоляИсточника = ЧастиПоляЗначения[1];
	
	ДанныеИсточника = Элементы[ИмяТаблицыИсточника].ТекущиеДанные;
	
	Если ДанныеИсточника = Неопределено Тогда
		Отбор = Неопределено;
	Иначе
		Отбор = Новый ФиксированнаяСтруктура(Новый Структура(ИмяПоля, ДанныеИсточника[ИмяПоляИсточника]));
	КонецЕсли;
	
	Элементы[ИмяТаблицы].ОтборСтрок = Отбор;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Файл", ТекущиеДанные.Идентификатор);
	НайденныеСтроки = ВыбранныеМетоды.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		ВыбранныеМетоды.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыДобавленияМетода(Методы, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Методы) Тогда
		ДобавитьМетодыВВыбранные(Методы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЗамещающиеМетодыИзНастроек()
	
	Файлы.Очистить();
	ВыбранныеМетоды.Очистить();
	РезервныеМетоды.Очистить();
	
	ПодключенныеФайлы = ХранилищеОбщихНастроек.Загрузить(Объект.ИмяПрограммы, "ПодключенныеФайлы");
	ОписанияЗамещающихМетодов = ХранилищеОбщихНастроек.Загрузить(Объект.ИмяПрограммы, "ЗамещающиеМетоды");
	РезервныеМетодыИзНастроек = ХранилищеОбщихНастроек.Загрузить(Объект.ИмяПрограммы, "РезервныеМетоды");
	
	Если ПодключенныеФайлы = Неопределено
		Или ОписанияЗамещающихМетодов = Неопределено Тогда
		
		ХранилищеОбщихНастроек.Сохранить(Объект.ИмяПрограммы, "ПодключенныеФайлы", Неопределено);
		ХранилищеОбщихНастроек.Сохранить(Объект.ИмяПрограммы, "ЗамещающиеМетоды", Неопределено);
		ХранилищеОбщихНастроек.Сохранить(Объект.ИмяПрограммы, "РезервныеМетоды", Неопределено);
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ПодключенныйФайл Из ПодключенныеФайлы Цикл
		ЗаполнитьЗначенияСвойств(Файлы.Добавить(), ПодключенныйФайл.Значение);
	КонецЦикла;
	
	Для Каждого ОписаниеМетода Из ОписанияЗамещающихМетодов Цикл
		
		СтрокаВыбранныеМетоды = ВыбранныеМетоды.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВыбранныеМетоды, ОписаниеМетода.Значение);
		СтрокаВыбранныеМетоды.Файл = ПодключенныеФайлы[ОписаниеМетода.Значение.Файл].Идентификатор;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция УдалитьКомментарииИФорматирование(ТекстовыйДокумент)
	
	ФорматированныеСтроки = Новый Массив;
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		Строка = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
		
		Если СтрНачинаетсяС(СокрЛП(Строка), "#Область ")
			Или СтрНачинаетсяС(СокрЛП(Строка), "#КонецОбласти") Тогда
			Продолжить;
		КонецЕсли;
		
		ЧислоВхожденийСлэшей = СтрЧислоВхождений(Строка, "//");
		
		Если ЧислоВхожденийСлэшей > 0 Тогда
			
			НачальнаяПозиция = 1;
			ПозицияСлэшей = СтрНайти(Строка, "//", , НачальнаяПозиция);
			
			Пока ПозицияСлэшей > 0 Цикл
				
				СтрокаДоСлэшей = Сред(Строка, 1, ПозицияСлэшей - 1);
				ПозицияПереносаСтроки = СтрНайти(СтрокаДоСлэшей, "|", НаправлениеПоиска.СКонца);
				
				Если ПозицияПереносаСтроки = 0 Тогда
					
					Если СтрЧислоВхождений(СтрокаДоСлэшей, """") % 2 = 0 Тогда
						
						Строка = СтрокаДоСлэшей;
						Прервать;
						
					Иначе
						
						ПозицияКавычекПосле = СтрНайти(Строка, """", , ПозицияСлэшей);
						НачальнаяПозиция = ?(ПозицияКавычекПосле = 0, СтрДлина(Строка), ПозицияКавычекПосле);
						
					КонецЕсли;
					
				Иначе
					
					Если СтрЧислоВхождений(Сред(СтрокаДоСлэшей, ПозицияПереносаСтроки, ПозицияСлэшей), """") % 2 = 1 Тогда
						
						Строка = СтрокаДоСлэшей;
						Прервать;
						
					Иначе
						
						НачальнаяПозиция = ПозицияСлэшей + 1;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ПозицияСлэшей = СтрНайти(Строка, "//", , НачальнаяПозиция);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СокрЛП(Строка)) Тогда
			ФорматированныеСтроки.Добавить(СокрЛП(Строка));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(ФорматированныеСтроки, " ");
	
КонецФункции

&НаКлиенте
Асинх Процедура ПрочитатьФайл(Файл)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	Ждать ТекстовыйДокумент.ПрочитатьАсинх(Файл.ПолноеИмя, "UTF-8");
	
	ЗаписьФайлы = ДобавитьЗаписьВФайлы(Файл);
	ЗаписьФайлы.ТекстФайла = ТекстовыйДокумент;
	ТекстБезФорматирования = УдалитьКомментарииИФорматирование(ТекстовыйДокумент);
	ОписанияМетодов = ПрочитатьОписанияМетодов(ТекстБезФорматирования, ЗаписьФайлы.Идентификатор);
	
	ДобавитьМетодыВВыбранные(ОписанияМетодов);
	
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьОписанияМетодов(Текст, ИдентификаторФайла)
	
	ОписанияМетодов = Новый Массив;
	
	_Текст = " " + Текст;
	_Текст = СтрЗаменить(_Текст, "  ", " ");
	Разделитель = "☺";
	
	СимволыОбрамленияСлова = Новый Массив;
	СимволыОбрамленияСлова.Добавить(" ");
	СимволыОбрамленияСлова.Добавить(";");
	СимволыОбрамленияСлова.Добавить("");
	
	ПодстрокиПоиска = СтрРазделить("КОНЕЦПРОЦЕДУРЫ,КОНЕЦФУНКЦИИ", ",");
	
	Для Каждого ПодстрокаПоиска Из ПодстрокиПоиска Цикл
		
		ЧислоВхождений = СтрЧислоВхождений(ВРег(_Текст), ПодстрокаПоиска);
		ДлинаПодстроки = СтрДлина(ПодстрокаПоиска);
		НомерВхождения = 1;
		
		Для Сч = 1 По ЧислоВхождений Цикл
			
			ПозицияПодстроки = СтрНайти(ВРег(_Текст), ПодстрокаПоиска, , , НомерВхождения);
			
			ПредыдущийСимвол = Сред(_Текст, ПозицияПодстроки - 1, 1);
			СледующийСимвол = Сред(_Текст, ПозицияПодстроки + ДлинаПодстроки, 1);
			
			Если СимволыОбрамленияСлова.Найти(ПредыдущийСимвол) = Неопределено 
				Или СимволыОбрамленияСлова.Найти(СледующийСимвол) = Неопределено Тогда
				
				НомерВхождения = НомерВхождения + 1;
				Продолжить;
				
			КонецЕсли;
			
			_Текст = СтрШаблон("%1%2%3",
				Сред(_Текст, 1, ПозицияПодстроки + ДлинаПодстроки - 2),
				Разделитель,
				Сред(_текст, ПозицияПодстроки + ДлинаПодстроки));
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстыМетодов = СтрРазделить(_Текст, Разделитель, Ложь);
	КлючОбъектаОбщий = "";
	ДирективыКомпиляции = СтрРазделить("НАКЛИЕНТЕ,НАСЕРВЕРЕ,НАСЕРВЕРЕБЕЗКОНТЕКСТА,НАКЛИЕНТЕНАСЕРВЕРЕБЕЗКОНТЕКСТА,НАКЛИЕНТЕНАСЕРВЕРЕ", ",");
	Аннотации = СтрРазделить("ВМЕСТО,ПЕРЕД,ПОСЛЕ", ",");
	
	Для Каждого ТекстМетода Из ТекстыМетодов Цикл
		
		ОписаниеМетода = Новый Структура("КлючОбъекта,Событие,Аннотация,РасширяемыйМетод,ДирективаКомпиляции,ТипМетода,Метод,Параметры,Экспорт,Файл");
		ОписаниеМетода.Файл = ИдентификаторФайла;
		
		Если СтрЗаканчиваетсяНа(ВРег(ТекстМетода), "КОНЕЦПРОЦЕДУР") Тогда
			ОписаниеМетода.ТипМетода = "Процедура";
		ИначеЕсли СтрЗаканчиваетсяНа(ВРег(ТекстМетода), "КОНЕЦФУНКЦИ") Тогда
			ОписаниеМетода.ТипМетода = "Функция";
		Иначе
			ВызватьИсключение НСтр("ru = 'Ошибка чтения файла. Не удалось определить конец метода'");
		КонецЕсли;
		
		ПозицияНачалаМетода = СтрНайти(ВРег(ТекстМетода), СтрШаблон(" %1 ", ВРег(ОписаниеМетода.ТипМетода)));
		ПозицияНачалаПараметров = СтрНайти(ТекстМетода, "(", , ПозицияНачалаМетода);
		ПозицияКонцаПараметров = СтрНайти(ТекстМетода, ")", , ПозицияНачалаПараметров);
		ПозицияИмяМетода = ПозицияНачалаМетода + СтрДлина(ОписаниеМетода.ТипМетода) + 1;
		
		БлокИнструкций = СтрЗаменить(СокрЛП(Сред(ТекстМетода, 1, ПозицияНачалаМетода - 1)), "  ", " ");
		
		ОписаниеМетода.КлючОбъекта = КлючОбъектаОбщий;
		ОписаниеМетода.Метод = СокрЛП(Сред(ТекстМетода, ПозицияИмяМетода, ПозицияНачалаПараметров - ПозицияИмяМетода));
		ОписаниеМетода.Параметры = СокрЛП(Сред(ТекстМетода, ПозицияНачалаПараметров + 1, ПозицияКонцаПараметров - ПозицияНачалаПараметров - 1));
		
		Если Не ПустаяСтрока(БлокИнструкций) Тогда
			
			ЧастиБлокаИнструкций = СтрРазделить(БлокИнструкций, "&", Ложь);
			
			Для Каждого Часть Из ЧастиБлокаИнструкций Цикл
				
				Если СтрНачинаетсяС(Часть, "@Модуль") Или СтрНачинаетсяС(Часть, "#Модуль") Тогда
					
					Если СтрНачинаетсяС(Часть, "@Модуль") Тогда
						Модуль = СокрЛП(МеждуСтрок(Часть, "@Модуль", "#"));
						КлючОбъектаОбщий = Модуль;
					Иначе
						Модуль = СокрЛП(МеждуСтрок(Часть, "#Модуль", "#"));
					КонецЕсли;
					
					ОписаниеМетода.КлючОбъекта = Модуль;
					
				КонецЕсли;
				
				Если СтрНайти(Часть, "#Событие ") > 0 Тогда
					ОписаниеМетода.Событие = СокрЛП(МеждуСтрок(Часть, "#Событие"));
				КонецЕсли;
				
				Если ДирективыКомпиляции.Найти(ВРег(СокрЛП(Часть))) <> Неопределено Тогда
					ОписаниеМетода.ДирективаКомпиляции = СокрЛП(Часть);
				Иначе
					
					Для Каждого Аннотация Из Аннотации Цикл
						
						Если СтрНачинаетсяС(ВРег(СокрЛП(Часть)), Аннотация) Тогда
							
							ОписаниеМетода.Аннотация = ТРег(Аннотация);
							ОписаниеМетода.РасширяемыйМетод = МеждуСтрок(Часть, """", """");
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОписаниеМетода.Экспорт = СтрНачинаетсяС(ВРег(СокрЛП(Сред(ТекстМетода, ПозицияКонцаПараметров + 1))), "ЭКСПОРТ");
		ОписанияМетодов.Добавить(ОписаниеМетода);
		
	КонецЦикла;
	
	Возврат ОписанияМетодов;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьМетодыВВыбранные(Методы)
	
	Для Каждого ВыбранныйМетод Из Методы Цикл
		
		НоваяСтрокаМетоды = ВыбранныеМетоды.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаМетоды, ВыбранныйМетод);
		НоваяСтрокаМетоды.Активен = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

#Область Настройки

&НаКлиенте
Асинх Процедура ЗагрузитьНастройки()
	
	Настройки = Ждать ПолучитьФорму("ВнешняяОбработка.Чпоньк.Форма.Настройки", , ЭтаФорма).Настройки();
	ПрименитьНастройки(Настройки);
	
КонецПроцедуры

&НаКлиенте
Функция ЗначениеНастройки(Ключ)
	
	Значение = "";
	
	ПараметрыОтбора = Новый Структура("Ключ", Ключ);
	НайденныеНастройки = Объект.Настройки.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеНастройки.Количество() > 0 Тогда
		Значение = НайденныеНастройки[0].Значение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаСервере
Функция ЗначениеНастройкиНаСервере(Ключ)
	
	Значение = "";
	
	ПараметрыОтбора = Новый Структура("Ключ", Ключ);
	НайденныеНастройки = Объект.Настройки.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеНастройки.Количество() > 0 Тогда
		Значение = НайденныеНастройки[0].Значение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаКлиенте
Процедура ПрименитьНастройки(Настройки)
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Настройки.Очистить();
		
	Для Каждого Настройка Из Настройки Цикл
		ЗаполнитьЗначенияСвойств(Объект.Настройки.Добавить(), Настройка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастроек(Настройки, ДополнительныеПараметры) Экспорт
	
	ПрименитьНастройки(Настройки);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура НовыйФайл(Команда)
	
	Файл = Ждать ВыбратьФайл("1С (*.bsl)|*.bsl", РежимДиалогаВыбораФайла.Сохранение);
	
	Если Файл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//ДобавитьФайл(Файл);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеМетодыКлассПриИзменении(Элемент)
	УстановитьФлагИзмененияВыбранногоМетода();
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеМетодыМодульПриИзменении(Элемент)
	УстановитьФлагИзмененияВыбранногоМетода();
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеМетодыОбъектПриИзменении(Элемент)
	УстановитьФлагИзмененияВыбранногоМетода();
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеМетодыДирективаКомпиляцииПриИзменении(Элемент)
	УстановитьФлагИзмененияВыбранногоМетода();
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеМетодыТипМетодаПриИзменении(Элемент)
	УстановитьФлагИзмененияВыбранногоМетода();
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеМетодыМетод1ПриИзменении(Элемент)
	УстановитьФлагИзмененияВыбранногоМетода();
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеМетодыПараметрыПриИзменении(Элемент)
	УстановитьФлагИзмененияВыбранногоМетода();
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеМетодыЭкспортПриИзменении(Элемент)
	УстановитьФлагИзмененияВыбранногоМетода();
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеМетодыРасширяемыйМетодПриИзменении(Элемент)
	УстановитьФлагИзмененияВыбранногоМетода();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагИзмененияВыбранногоМетода()
	
	ТекущиеДанные = Элементы.ВыбранныеМетоды.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Записать = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеМетодыПриАктивизацииСтроки(Элемент)
	
	Элементы.Группа1.Доступность = Элементы.ВыбранныеМетоды.ТекущиеДанные <> Неопределено;
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция МеждуСтрок(Знач Строка, ПодстрокаНачало, ПодстрокаКонец = "")
	
	ПозицияНачало = СтрНайти(Строка, ПодстрокаНачало);
	Если ПозицияНачало > 0 Тогда
		ПозицияНачало = ПозицияНачало + СтрДлина(ПодстрокаНачало);
	КонецЕсли;
	
	ПозицияКонец = 0;
	Если ПодстрокаКонец <> "" Тогда
		ПозицияКонец = СтрНайти(Строка, ПодстрокаКонец, , ПозицияНачало);
	КонецЕсли;
	
	Если ПозицияКонец = 0 Тогда
		ПозицияКонец = СтрДлина(Строка) + 1;
	КонецЕсли;
	
	Возврат Сред(Строка, ПозицияНачало, ПозицияКонец - ПозицияНачало);
	
КонецФункции

#КонецОбласти