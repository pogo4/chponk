#Область ПрограммныйИнтерфейс

Функция ФайлИзменен(ИмяФайла, Содержание) Экспорт
	
	Ошибки = Новый Массив;
	ДобавитьЕслиЗаполнено(Ошибки, ПроверитьЗначение("ИмяФайла", ИмяФайла, Тип("Строка"), Истина));
	ДобавитьЕслиЗаполнено(Ошибки, ПроверитьЗначение("Содержание", Содержание, Тип("Строка"), Истина));
	
	Если Ошибки.Количество() > 0 Тогда
		Возврат СтрСоединить(Ошибки, Символы.ПС);
	КонецЕсли;
	
	Возврат ОбработкаИзмененияФайла(ИмяФайла, Содержание);
	
КонецФункции

Функция ФайлУдален(ИмяФайла) Экспорт
	
	Ошибки = Новый Массив;
	ДобавитьЕслиЗаполнено(Ошибки, ПроверитьЗначение("ИмяФайла", ИмяФайла, Тип("Строка"), Истина));
	
	Если Ошибки.Количество() > 0 Тогда
		Возврат СтрСоединить(Ошибки, Символы.ПС);
	КонецЕсли;
	
	Возврат ОбработкаУдаленияФайла(ИмяФайла);
	
КонецФункции

Функция КодМетода(КлючМетода, МеткаВозврата, ИмяПеременнойРезультата = "") Экспорт
	
	Настройки = ПрочитатьНастройкиДляМетода(КлючМетода);
	
	Если Настройки = Неопределено
		Или Не Настройки.Активен Тогда
		Возврат "";
	КонецЕсли;
	
	КодМетода = Настройки.КодМетода;
	КодМетода = СтрЗаменить(КодМетода, "{Чпоньк_МеткаВозврата}", МеткаВозврата);
	КодМетода = СтрЗаменить(КодМетода, "{Чпоньк_ИмяПеременнойРезультата}", ИмяПеременнойРезультата);
	
	Возврат КодМетода;
	
КонецФункции

Процедура ОбновитьЗамещающиеМетодыПоФайлу(ИмяФайла, Знач Текст) Экспорт
	
	ТекстБезФорматирования = УдалитьКомментарииИФорматирование(Текст);
	МетодыВФайле = ПрочитатьОписанияМетодов(ТекстБезФорматирования);
	ЗамещающиеМетоды = ПрочитатьНастройки("ЗамещающиеМетоды");
	
	МетодыДляЗаписи = Новый Соответствие;
	МетодыДляЗамены = Новый Массив;
	
	Для Каждого МетодВФайле Из МетодыВФайле Цикл
		
		ЗамещающийМетод = ЗамещающиеМетоды[МетодВФайле.Ключ];
		
		Если ЗамещающийМетод = Неопределено Тогда
			
			МетодДляЗаписи = МетодВФайле.Значение;
			МетодДляЗаписи.Файл = ИмяФайла;
			
		Иначе
			
			ЗамещающийМетод.КодМетода = МетодВФайле.Значение.КодМетода;
			ЗамещающийМетод.Активен = Истина;
			МетодДляЗаписи = ЗамещающийМетод;
			
		КонецЕсли;
		
		МетодыДляЗаписи.Вставить(МетодВФайле.Ключ, МетодДляЗаписи);
		
		Если МетодДляЗаписи.ВКонфигурации = Ложь Тогда
			МетодыДляЗамены.Добавить(МетодВФайле.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МетодыДляЗамены.Количество() > 0 Тогда
		
		Для Каждого МетодДляЗаписи Из МетодыДляЗаписи Цикл
			
			Для Каждого МетодДляЗамены Из МетодыДляЗамены Цикл
				
				ЗаменитьВызовМетода(МетодДляЗаписи.Значение, МетодДляЗамены)
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаписатьНастройки("ЗамещающиеМетоды", МетодыДляЗаписи);
	
	//Для Каждого ИмяМетода Из СписокМетодов() Цикл
	//	
	//	КодМетодаДляПоиска = СтрЗаменить(СтрЗаменить(ВРег(КодМетода), Символы.ПС, " "), Символы.Таб, " ");
	//	ПодстрокаПоиска = ВРег(СтрШаблон(" %1(", ИмяМетода));
	//	Позиция = СтрНайти(КодМетодаДляПоиска, ПодстрокаПоиска);
	//	
	//	Если Позиция = 0 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	ПодстрокаЗамены = СтрШаблон(" Чпоньк_%1(",
	//		ИмяМетода);
	//	
	//	КодМетода = СтрШаблон("%1%2%3",
	//		Сред(КодМетода, 1, Позиция - 1),
	//		ПодстрокаЗамены,
	//		Сред(КодМетода, Позиция + СтрДлина(ПодстрокаПоиска)));
	//	
	//КонецЦикла;
	
КонецПроцедуры

Функция ИмяМодуляПоТипу(ТипОбъекта) Экспорт
	
	ТипОбъектаСтрокой = Строка(ТипОбъекта);
	
	ЧастиТипа = СтрРазделить(ТипОбъектаСтрокой, ":");
	
	ШаблоныИменМодулей = Новый Соответствие;
	ШаблоныИменМодулей.Вставить("справочник объект", "Справочники.%1.МодульОбъекта");
	ШаблоныИменМодулей.Вставить("справочник менеджер", "Справочники.%1.МодульМенеджера");
	ШаблоныИменМодулей.Вставить("общий модуль", "ОбщиеМодули.%1");
	ШаблоныИменМодулей.Вставить("документ объект", "Документы.%1.МодульОбъекта");
	ШаблоныИменМодулей.Вставить("документ менеджер", "Документы.%1.МодульМенеджера");
	
	// TODO: заполнить все модули
	
	ШаблонИмениМодуля = ШаблоныИменМодулей[СокрЛП(НРег(ЧастиТипа[0]))];
	ИмяМодуля = "";
	Если ШаблонИмениМодуля <> Неопределено Тогда
		ИмяМодуля = СтрШаблон(ШаблонИмениМодуля, СокрЛП(ЧастиТипа[1]));
	КонецЕсли;
	
	Возврат ИмяМодуля;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбработкаИзмененияФайла(ИмяФайла, Содержание) Экспорт
	
	ПодключенныеФайлы = Чпоньк.ПрочитатьНастройки("ПодключенныеФайлы");
	
	Если ПодключенныеФайлы = Неопределено Тогда
		Возврат "В настройках нет подключенных файлов";
	КонецЕсли;
	
	ПодключенныйФайл = ПодключенныеФайлы[НРег(ИмяФайла)];
	
	Если ПодключенныйФайл = Неопределено Тогда
		Возврат "Файл не подключен";
	КонецЕсли;
	
	ПодключенныйФайл.ВремяИзменения = ТекущаяДатаСеанса();
	ПодключенныйФайл.ТекстФайла = Содержание;
	
	ОбновитьЗамещающиеМетодыПоФайлу(ПодключенныйФайл.ПолноеИмя, Содержание);
	
	ЗаписатьНастройки("ПодключенныеФайлы", ПодключенныеФайлы);
	
	Возврат СтрШаблон("%1 - <%2> - изменения записаны", Формат(ПодключенныйФайл.ВремяИзменения, "ДЛФ=T"), ПодключенныйФайл.Имя);
	
КонецФункции

Функция ОбработкаУдаленияФайла(ИмяФайла) Экспорт
	
	ПодключенныеФайлы = Чпоньк.ПрочитатьНастройки("ПодключенныеФайлы");
	
	Если ПодключенныеФайлы = Неопределено Тогда
		Возврат "В настройках нет подключенных файлов";
	КонецЕсли;
	
	// TODO: удалить замещающие методы по файлу
	
	ПодключенныеФайлы.Удалить(ИмяФайла);
	
	ЗаписатьНастройки("ПодключенныеФайлы", ПодключенныеФайлы);
	
	Возврат "Файл отключен";
	
КонецФункции

Функция ПроверитьЗначение(ИмяПараметра, Значение, Тип, Заполненность = Ложь)
	
	Если ТипЗнч(Значение) <> Тип Тогда
		Возврат СтрШаблон("Некорректный тип параметра '%1': %2. Ожидается <%3>",
			ИмяПараметра,
			ТипЗнч(Значение),
			Тип);
	КонецЕсли;
	
	Если Заполненность И Не ЗначениеЗаполнено(Значение) Тогда
		Возврат СтрШаблон("Параметр '%1' не заполнен", ИмяПараметра);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура ДобавитьЕслиЗаполнено(Массив, Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Массив.Добавить(Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция УдалитьКомментарииИФорматирование(Текст)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Текст);
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	
	ФорматированныеСтроки = Новый Массив;
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		Строка = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
		
		Если СтрНачинаетсяС(СокрЛП(Строка), "#Область ")
			Или СтрНачинаетсяС(СокрЛП(Строка), "#КонецОбласти") Тогда
			Продолжить;
		КонецЕсли;
		
		ЧислоВхожденийСлэшей = СтрЧислоВхождений(Строка, "//");
		
		Если ЧислоВхожденийСлэшей > 0 Тогда
			
			НачальнаяПозиция = 1;
			ПозицияСлэшей = СтрНайти(Строка, "//", , НачальнаяПозиция);
			
			Пока ПозицияСлэшей > 0 Цикл
				
				СтрокаДоСлэшей = Сред(Строка, 1, ПозицияСлэшей - 1);
				ПозицияПереносаСтроки = СтрНайти(СтрокаДоСлэшей, "|", НаправлениеПоиска.СКонца);
				
				Если ПозицияПереносаСтроки = 0 Тогда
					Если СтрЧислоВхождений(СтрокаДоСлэшей, """") % 2 = 0 Тогда
						
						Строка = СтрокаДоСлэшей;
						Прервать;
						
					Иначе
						
						ПозицияКавычекПосле = СтрНайти(Строка, """", , ПозицияСлэшей);
						НачальнаяПозиция = ?(ПозицияКавычекПосле = 0, СтрДлина(Строка), ПозицияКавычекПосле);
						
					КонецЕсли;
				Иначе
					Если СтрЧислоВхождений(Сред(СтрокаДоСлэшей, ПозицияПереносаСтроки, ПозицияСлэшей), """") % 2 = 1 Тогда
						
						Строка = СтрокаДоСлэшей;
						Прервать;
						
					Иначе
						НачальнаяПозиция = ПозицияСлэшей + 1;
					КонецЕсли;
				КонецЕсли;
				ПозицияСлэшей = СтрНайти(Строка, "//", , НачальнаяПозиция);
			КонецЦикла;
		КонецЕсли;
		
		Строка = СокрЛП(Строка);
		
		Если ЗначениеЗаполнено(Строка) Тогда
			
			Если СтрНачинаетсяС(Строка, "|") Тогда
				Строка = СокрЛП(Сред(Строка, 2));
			КонецЕсли;
			
			ФорматированныеСтроки.Добавить(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(ФорматированныеСтроки, " ");
	
КонецФункции

Функция ПрочитатьОписанияМетодов(Текст)
	
	ОписанияМетодов = Новый Соответствие;
	
	_Текст = " " + Текст;
	_Текст = СтрЗаменить(_Текст, "  ", " ");
	Разделитель = "☺";
	
	СимволыОбрамленияСлова = Новый Массив;
	СимволыОбрамленияСлова.Добавить(" ");
	СимволыОбрамленияСлова.Добавить(";");
	СимволыОбрамленияСлова.Добавить("");
	
	ПодстрокиПоиска = СтрРазделить("КОНЕЦПРОЦЕДУРЫ,КОНЕЦФУНКЦИИ", ",");
	
	Для Каждого ПодстрокаПоиска Из ПодстрокиПоиска Цикл
		
		ЧислоВхождений = СтрЧислоВхождений(ВРег(_Текст), ПодстрокаПоиска);
		ДлинаПодстроки = СтрДлина(ПодстрокаПоиска);
		НомерВхождения = 1;
		
		Для Сч = 1 По ЧислоВхождений Цикл
			
			ПозицияПодстроки = СтрНайти(ВРег(_Текст), ПодстрокаПоиска, , , НомерВхождения);
			
			ПредыдущийСимвол = Сред(_Текст, ПозицияПодстроки - 1, 1);
			СледующийСимвол = Сред(_Текст, ПозицияПодстроки + ДлинаПодстроки, 1);
			
			Если СимволыОбрамленияСлова.Найти(ПредыдущийСимвол) = Неопределено 
				Или СимволыОбрамленияСлова.Найти(СледующийСимвол) = Неопределено Тогда
				
				НомерВхождения = НомерВхождения + 1;
				Продолжить;
				
			КонецЕсли;
			
			_Текст = СтрШаблон("%1%2%3",
				Сред(_Текст, 1, ПозицияПодстроки + ДлинаПодстроки - 2),
				Разделитель,
				Сред(_текст, ПозицияПодстроки + ДлинаПодстроки));
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстыМетодов = СтрРазделить(_Текст, Разделитель, Ложь);
	МодульОбщий = "";
	ДирективыКомпиляции = СтрРазделить("НАКЛИЕНТЕ,НАСЕРВЕРЕ,НАСЕРВЕРЕБЕЗКОНТЕКСТА,НАКЛИЕНТЕНАСЕРВЕРЕБЕЗКОНТЕКСТА,НАКЛИЕНТЕНАСЕРВЕРЕ", ",");
	Аннотации = СтрРазделить("ВМЕСТО,ПЕРЕД,ПОСЛЕ", ",");
	
	Для Каждого ТекстМетода Из ТекстыМетодов Цикл
		
		ОписаниеМетода = НовоеОписаниеМетода();
		
		Если СтрЗаканчиваетсяНа(ВРег(ТекстМетода), "КОНЕЦПРОЦЕДУР") Тогда
			ОписаниеМетода.ТипМетода = "Процедура";
		ИначеЕсли СтрЗаканчиваетсяНа(ВРег(ТекстМетода), "КОНЕЦФУНКЦИ") Тогда
			ОписаниеМетода.ТипМетода = "Функция";
		Иначе
			ВызватьИсключение НСтр("ru = 'Ошибка чтения файла. Не удалось определить конец метода'");
		КонецЕсли;
		
		ПозицияНачалаМетода = СтрНайти(ВРег(ТекстМетода), СтрШаблон(" %1 ", ВРег(ОписаниеМетода.ТипМетода)));
		ПозицияНачалаПараметров = СтрНайти(ТекстМетода, "(", , ПозицияНачалаМетода);
		ПозицияКонцаПараметров = СтрНайти(ТекстМетода, ")", , ПозицияНачалаПараметров);
		ПозицияИмяМетода = ПозицияНачалаМетода + СтрДлина(ОписаниеМетода.ТипМетода) + 1;
		
		БлокИнструкций = СтрЗаменить(СокрЛП(Сред(ТекстМетода, 1, ПозицияНачалаМетода - 1)), "  ", " ");
		
		ОписаниеМетода.Модуль = МодульОбщий;
		ОписаниеМетода.Метод = СокрЛП(Сред(ТекстМетода, ПозицияИмяМетода, ПозицияНачалаПараметров - ПозицияИмяМетода));
		ОписаниеМетода.Параметры = СтрЗаменить(СокрЛП(Сред(ТекстМетода, ПозицияНачалаПараметров + 1, ПозицияКонцаПараметров - ПозицияНачалаПараметров - 1)), ", ", ",");
		
		Если Не ПустаяСтрока(БлокИнструкций) Тогда
			
			ЧастиБлокаИнструкций = СтрРазделить(БлокИнструкций, "&", Ложь);
			
			Для Каждого Часть Из ЧастиБлокаИнструкций Цикл
				
				Если СтрНачинаетсяС(Часть, "@Модуль") Или СтрНачинаетсяС(Часть, "#Модуль") Тогда
					
					Если СтрНачинаетсяС(Часть, "@Модуль") Тогда
						Модуль = СокрЛП(МеждуСтрок(Часть, "@Модуль", "#"));
						МодульОбщий = Модуль;
					Иначе
						Модуль = СокрЛП(МеждуСтрок(Часть, "#Модуль", "#"));
					КонецЕсли;
					
					ОписаниеМетода.Модуль = Модуль;
					
				КонецЕсли;
				
				Если СтрНайти(Часть, "#Событие ") > 0 Тогда
					ОписаниеМетода.Событие = СокрЛП(МеждуСтрок(Часть, "#Событие"));
				КонецЕсли;
				
				Если ДирективыКомпиляции.Найти(ВРег(СокрЛП(Часть))) <> Неопределено Тогда
					ОписаниеМетода.ДирективаКомпиляции = СокрЛП(Часть);
				Иначе
					
					Для Каждого Аннотация Из Аннотации Цикл
						
						Если СтрНачинаетсяС(ВРег(СокрЛП(Часть)), Аннотация) Тогда
							
							ОписаниеМетода.Аннотация = ТРег(Аннотация);
							ОписаниеМетода.РасширяемыйМетод = МеждуСтрок(Часть, """", """");
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОписаниеМетода.Экспорт = СтрНачинаетсяС(ВРег(СокрЛП(Сред(ТекстМетода, ПозицияКонцаПараметров + 1))), "ЭКСПОРТ");
		
		ДлинаКонецМетода = ?(ОписаниеМетода.ТипМетода = "Процедура", 13, 11);
		Если ОписаниеМетода.Экспорт Тогда
			ПозицияНачалаТелаМетода = ПозицияКонцаПараметров + 9;
		Иначе
			ПозицияНачалаТелаМетода = ПозицияКонцаПараметров + 1;
		КонецЕсли;
		
		КодМетода = СокрЛП(Сред(ТекстМетода, ПозицияНачалаТелаМетода, СтрДлина(ТекстМетода) - ПозицияНачалаТелаМетода - ДлинаКонецМетода));
		ЗаменитьВозвратыНаМеткиВИсходномКоде(КодМетода, ОписаниеМетода.ТипМетода);
		
		ОписаниеМетода.КодМетода = КодМетода;
		СформироватьКлючМетода(ОписаниеМетода);
		
		ОписанияМетодов.Вставить(ОписаниеМетода.Ключ, ОписаниеМетода);
		
	КонецЦикла;
	
	Возврат ОписанияМетодов;
	
КонецФункции

Процедура ЗаменитьВызовМетода(ВызывающийМетод, КлючМетода)
	
	Если ВызывающийМетод.Ключ = КлючМетода Тогда
		Возврат;
	КонецЕсли;
	
	ИсходныйКод = ВызывающийМетод.КодМетода;
	ЧастиКлюча = СтрРазделить(КлючМетода, "-");
	АтрибутыМетода = ЧастиКлюча[0];
	МодульМетода = ЧастиКлюча[1];
	ИмяМетода = ЧастиКлюча[2];
	ПараметрыМетода = ЧастиКлюча[3];
	
	Если МодульМетода <> ВызывающийМетод.Модуль
		И Сред(АтрибутыМетода, 4, 1) <> "Э" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИсходныйКодВРег = ВРег(ИсходныйКод);
	
	СимволыОбрамленияСлова = Новый Массив;
	СимволыОбрамленияСлова.Добавить(";");
	СимволыОбрамленияСлова.Добавить(" ");
	СимволыОбрамленияСлова.Добавить("(");
	СимволыОбрамленияСлова.Добавить("+");
	СимволыОбрамленияСлова.Добавить("-");
	СимволыОбрамленияСлова.Добавить(".");
	// TODO: расширить список обрамляющих симоволов в зависимости от типа метода
	
	//   "В" - Вместо, "Н" - Перед, "К" - После, "_" - Не установлено
	//   "К" - Клиент, "С" - Сервер, "Б" - НаСервереБезКонтекста, "В" - НаКлиентеНаСервереБезКонтекста, "_" - Не установлено
	//   "Ф" - Функция, "П" - Процедура
	//   "Э" - Экспорт, "_" - Не Экспорт
	
	МетодыПодстановки = Новый Соответствие;
	МетодыПодстановки.Вставить("_КП_", "Чпоньк_ВыполнитьПроцедураНаКлиенте");
	МетодыПодстановки.Вставить("_СП_", "Чпоньк_ВыполнитьПроцедураНаСервере");
	МетодыПодстановки.Вставить("_БП_", "Чпоньк_ВыполнитьПроцедураНаСервереБезКонтекста");
	МетодыПодстановки.Вставить("_КФ_", "Чпоньк_ВыполнитьФункцияНаКлиенте");
	МетодыПодстановки.Вставить("_СФ_", "Чпоньк_ВыполнитьФункцияНаСервере");
	МетодыПодстановки.Вставить("_БФ_", "Чпоньк_ВыполнитьФункцияНаСервереБезКонтекста");
	МетодыПодстановки.Вставить("__ФЭ", "Чпоньк_ВыполнитьФункция");
	МетодыПодстановки.Вставить("__ПЭ", "Чпоньк_ВыполнитьПроцедура");
	МетодыПодстановки.Вставить("__Ф_", "Чпоньк_ВыполнитьФункция");
	МетодыПодстановки.Вставить("__П_", "Чпоньк_ВыполнитьПроцедура");
	
	МетодыПодстановкиИзвне = Новый Соответствие;
	МетодыПодстановкиИзвне.Вставить("_КПЭ", "Чпоньк_ВыполнитьПроцедураНаКлиентеИзвне");
	МетодыПодстановкиИзвне.Вставить("_КФЭ", "Чпоньк_ВыполнитьФункцияНаКлиентеИзвне");
	МетодыПодстановкиИзвне.Вставить("__ФЭ", "Чпоньк_ВыполнитьФункцияИзвне");
	МетодыПодстановкиИзвне.Вставить("__ПЭ", "Чпоньк_ВыполнитьПроцедураИзвне");
	
	ДлинаИмени = СтрДлина(ИмяМетода);
	ЧислоВхождений = СтрЧислоВхождений(ИсходныйКодВРег, ВРег(ИмяМетода));
	НомерВхождения = 1;
	ИсходныйКодПослеЗамены = ИсходныйКод;
	
	Для Сч = 1 По ЧислоВхождений Цикл
		
		ПозицияПодстроки = СтрНайти(ИсходныйКодВРег, ВРег(ИмяМетода), , , НомерВхождения);
		
		ПредыдущийСимвол = Сред(ИсходныйКод, ПозицияПодстроки - 1, 1);
		СледующийСимвол = Сред(ИсходныйКод, ПозицияПодстроки + ДлинаИмени, 1);
		
		Если СимволыОбрамленияСлова.Найти(ПредыдущийСимвол) = Неопределено 
			И Не СтрНачинаетсяС(ИсходныйКодВРег, ВРег(ИмяМетода))
			Или СледующийСимвол <> "(" Тогда
			
			НомерВхождения = НомерВхождения + 1;
			Продолжить;
			
		КонецЕсли;
		
		Если ПредыдущийСимвол <> "." И МодульМетода <> ВызывающийМетод.Модуль Тогда
			Продолжить;
		КонецЕсли;
		
		ПозицияНачалаПараметров = ПозицияПодстроки + ДлинаИмени;
		ПозицияКонцаПараметров = СтрНайти(ИсходныйКодВРег, ")", , ПозицияНачалаПараметров);
		
		СтрокаАргументов = СокрЛП(Сред(ИсходныйКод, ПозицияНачалаПараметров + 1, ПозицияКонцаПараметров - ПозицияНачалаПараметров - 1));
		Аргументы = СтрРазделить(СтрокаАргументов, ",");
		Чпоньк_АргументыМетода = Новый Массив;
		Чпоньк_АргументыМетода.Добавить("Чпоньк_АргументыМетода = Новый Массив;");
		
		Если Не (Аргументы.Количество() = 1 И Не ЗначениеЗаполнено(Аргументы[0])) Тогда
			
			Для Каждого Аргумент Из Аргументы Цикл
				Чпоньк_АргументыМетода.Добавить(СтрШаблон("Чпоньк_АргументыМетода.Добавить(%1);", Аргумент));
			КонецЦикла;
			
		КонецЕсли;
		
		ПозицияДляВставкиАргументов = СтрНайти(ИсходныйКодВРег, ";", НаправлениеПоиска.СКонца, ПозицияПодстроки);
		СтрокаДоМетода = Сред(ИсходныйКод, ПозицияДляВставкиАргументов + 1, ПозицияПодстроки - ПозицияДляВставкиАргументов - 1);
		
		Если ПредыдущийСимвол = "." Тогда
			
			СловаДоМетода = СтрРазделить(СтрокаДоМетода, " =+-*/%(,");
			ИмяМодуля = СловаДоМетода[СловаДоМетода.ВГраница()];
			СтрокаДоМетода = Сред(СтрокаДоМетода, 1, СтрДлина(СтрокаДоМетода) - СтрДлина(ИмяМодуля));
			
			ИсходныйКодПослеЗамены = СтрШаблон("%1 %2%3%4(%5, ""%6"", Чпоньк_АргументыМетода)%7",
				Сред(ИсходныйКод, 1, ПозицияДляВставкиАргументов),
				СтрСоединить(Чпоньк_АргументыМетода, " "),
				СтрокаДоМетода,
				МетодыПодстановкиИзвне[АтрибутыМетода],
				Лев(ИмяМодуля, СтрДлина(ИмяМодуля) - 1),
				ИмяМетода,
				Сред(ИсходныйКод, ПозицияКонцаПараметров + 1));
			
		Иначе
			
			ИсходныйКодПослеЗамены = СтрШаблон("%1 %2%3%4(""%5"", Чпоньк_АргументыМетода)%6",
				Сред(ИсходныйКод, 1, ПозицияДляВставкиАргументов),
				СтрСоединить(Чпоньк_АргументыМетода, " "),
				СтрокаДоМетода,
				МетодыПодстановки[АтрибутыМетода],
				КлючМетода,
				Сред(ИсходныйКод, ПозицияКонцаПараметров + 1));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВызывающийМетод.КодМетода = ИсходныйКодПослеЗамены;
	
КонецПроцедуры

Процедура ЗаменитьВозвратыНаМеткиВИсходномКоде(ИсходныйКод, ТипМетода)
	
	СимволыОбрамленияСлова = Новый Массив;
	СимволыОбрамленияСлова.Добавить(Символы.Таб);
	СимволыОбрамленияСлова.Добавить(Символы.ВК);
	СимволыОбрамленияСлова.Добавить(Символы.НПП);
	СимволыОбрамленияСлова.Добавить(Символы.ПС);
	СимволыОбрамленияСлова.Добавить(";");
	СимволыОбрамленияСлова.Добавить(" ");
	
	ПодстрокаПоиска = "ВОЗВРАТ";
	ДлинаПодстроки = СтрДлина(ПодстрокаПоиска);
	ЧислоВхождений = СтрЧислоВхождений(ВРег(ИсходныйКод), ПодстрокаПоиска);
	
	Для НомерВхождения = 1 По ЧислоВхождений Цикл
		
		ПозицияПодстроки = СтрНайти(ВРег(ИсходныйКод), ПодстрокаПоиска, , , НомерВхождения);
		
		ПредыдущийСимвол = Сред(ИсходныйКод, ПозицияПодстроки - 1, 1);
		СледующийСимвол = Сред(ИсходныйКод, ПозицияПодстроки + ДлинаПодстроки, 1);
		
		Если СимволыОбрамленияСлова.Найти(ПредыдущийСимвол) = Неопределено 
			Или СимволыОбрамленияСлова.Найти(СледующийСимвол) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТипМетода = "Процедура" Тогда
			
			ИсходныйКод = СтрШаблон("%1ВызватьИсключение ""{Чпоньк_МеткаВозврата}""%2",
				Сред(ИсходныйКод, 1, ПозицияПодстроки - 1),
				Сред(ИсходныйКод, ПозицияПодстроки + ДлинаПодстроки));
			
		Иначе
			
			ПозицияКонцаСтрокиВозврата = СтрНайти(ИсходныйКод, ";", , ПозицияПодстроки + ДлинаПодстроки);
			ИсходныйКод = СтрШаблон("%1{Чпоньк_ИмяПеременнойРезультата} = %2; ВызватьИсключение ""{Чпоньк_МеткаВозврата}""%3",
				Сред(ИсходныйКод, 1, ПозицияПодстроки - 1),
				Сред(ИсходныйКод, ПозицияПодстроки + ДлинаПодстроки, ПозицияКонцаСтрокиВозврата - ПозицияПодстроки - ДлинаПодстроки),
				Сред(ИсходныйКод, ПозицияКонцаСтрокиВозврата + 1));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция МеждуСтрок(Знач Строка, ПодстрокаНачало, ПодстрокаКонец = "")
	
	ПозицияНачало = СтрНайти(Строка, ПодстрокаНачало);
	Если ПозицияНачало > 0 Тогда
		ПозицияНачало = ПозицияНачало + СтрДлина(ПодстрокаНачало);
	КонецЕсли;
	
	ПозицияКонец = 0;
	Если ПодстрокаКонец <> "" Тогда
		ПозицияКонец = СтрНайти(Строка, ПодстрокаКонец, , ПозицияНачало);
	КонецЕсли;
	
	Если ПозицияКонец = 0 Тогда
		ПозицияКонец = СтрДлина(Строка) + 1;
	КонецЕсли;
	
	Возврат Сред(Строка, ПозицияНачало, ПозицияКонец - ПозицияНачало);
	
КонецФункции

Функция ПрочитатьНастройки(ИмяНастроек) Экспорт
	Возврат ХранилищеОбщихНастроек.Загрузить("Чпоньк", ИмяНастроек);
КонецФункции

Процедура ЗаписатьНастройки(ИмяНастроек, Значение) Экспорт
	ХранилищеОбщихНастроек.Сохранить("Чпоньк", ИмяНастроек, Значение);
КонецПроцедуры

Функция ПрочитатьНастройкиДляМетода(Ключ)
	Возврат ПрочитатьНастройки("ЗамещающиеМетоды")[Ключ];
КонецФункции

Функция ЗначенияСвойствРавны(Структура1, Структура2, ИменаСвойств)
	
	ЗначенияСвойствРавны = Истина;
	
	Для Каждого ИмяСвойства Из ИменаСвойств Цикл
		
		ЗначенияСвойствРавны = ЗначенияСвойствРавны 
			И Структура1.Свойство(ИмяСвойства)
			И Структура2.Свойство(ИмяСвойства)
			И Структура1[ИмяСвойства] = Структура2[ИмяСвойства];
		
		Если Не ЗначенияСвойствРавны Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗначенияСвойствРавны;
	
КонецФункции

Функция НовоеОписаниеМетода()
	
	ОписаниеМетода = Новый Структура;
	ОписаниеМетода.Вставить("Ключ", "");
	ОписаниеМетода.Вставить("Модуль", "");
	ОписаниеМетода.Вставить("ВКонфигурации", Ложь);
	ОписаниеМетода.Вставить("Событие", "");
	ОписаниеМетода.Вставить("Аннотация", "");
	ОписаниеМетода.Вставить("РасширяемыйМетод", "");
	ОписаниеМетода.Вставить("ДирективаКомпиляции", "");
	ОписаниеМетода.Вставить("ТипМетода", "Процедура");
	ОписаниеМетода.Вставить("Метод", "");
	ОписаниеМетода.Вставить("Параметры", "");
	ОписаниеМетода.Вставить("Экспорт", Ложь);
	ОписаниеМетода.Вставить("КодМетода", "");
	ОписаниеМетода.Вставить("Активен", Истина);
	ОписаниеМетода.Вставить("Файл", "");
	
	Возврат ОписаниеМетода;
	
КонецФункции

// Шаблон ключа: Атрибуты-Модуль-Метод-Параметры
//  Атрибуты:
//   "В" - Вместо, "Н" - Перед, "К" - После, "_" - Не установлено
//   "К" - Клиент, "С" - Сервер, "Б" - НаСервереБезКонтекста, "В" - НаКлиентеНаСервереБезКонтекста, "_" - Не установлено
//   "Ф" - Функция, "П" - Процедура
//   "Э" - Экспорт, "_" - Не Экспорт
//  Модуль как есть
//  Метод как есть
//  Параметры с замененными пробелам и запятыми на "_"
// Пример:
//  &НаКлиенте
//  Процедура СформироватьКлючМетода(ОписаниеМетода)
//  Ключ = "_КП_-Обработки.Чпоньк.Форма-СформироватьКлючМетода-ОписаниеМетода"
//
// Параметры:
//  ОписаниеМетода	 - Строка	 - 
//
Процедура СформироватьКлючМетода(ОписаниеМетода)
	
	КодыАннотации = Новый Соответствие;
	КодыАннотации.Вставить("Вместо", "В");
	КодыАннотации.Вставить("Перед", "Н");
	КодыАннотации.Вставить("После", "К");
	КодыАннотации.Вставить("", "_");
	КодыАннотации.Вставить(Неопределено, "_");
	
	КодАннотации = КодыАннотации[ОписаниеМетода.Аннотация];
	
	КодыДирективКомпиляции = Новый Соответствие;
	КодыДирективКомпиляции.Вставить("НаКлиенте", "К");
	КодыДирективКомпиляции.Вставить("НаСервере", "С");
	КодыДирективКомпиляции.Вставить("НаСервереБезКонтекста", "Б");
	КодыДирективКомпиляции.Вставить("НаКлиентеНаСервереБезКонтекста", "В");
	КодыДирективКомпиляции.Вставить("", "_");
	КодыДирективКомпиляции.Вставить(Неопределено, "_");
	
	КодДирективыКомпиляции = КодыДирективКомпиляции[ОписаниеМетода.ДирективаКомпиляции];
	
	КодТипаМетода = Лев(ОписаниеМетода.ТипМетода, 1);
	
	КодЭкспорт = ?(ОписаниеМетода.Экспорт, "Э", "_");
	
	Атрибуты = СтрШаблон("%1%2%3%4", КодАннотации, КодДирективыКомпиляции, КодТипаМетода, КодЭкспорт);
	Модуль = ОписаниеМетода.Модуль;
	Метод = ОписаниеМетода.Метод;
	Параметры_ = СтрЗаменить(СтрЗаменить(ОписаниеМетода.Параметры, " ", "_"), ",", "_");
	
	КлючМетода = СтрШаблон("%1-%2-%3-%4", Атрибуты, Модуль, Метод, Параметры_);
	
	ОписаниеМетода.Ключ = КлючМетода;
	
КонецПроцедуры

#КонецОбласти
