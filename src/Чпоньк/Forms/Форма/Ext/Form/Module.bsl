
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	
	Объект.Словарь.Загрузить(Обработка.ТаблицаИзМакета("Словарь"));
	Объект.МодулиКлассов.Загрузить(Обработка.ТаблицаИзМакета("МодулиКлассов"));
	Объект.ОписанияКлассов.Загрузить(Обработка.ТаблицаИзМакета("ОписанияКлассов"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗагрузитьНастройки();
	ПодключитьОбработчикОжидания("ПриОткрытииПосле", 0.2, Истина);
	
	Если Не ПервыйЗапуск() Тогда
		
		ПрочитатьЗамещающиеМетодыИзНастроек();
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновная;
		Элементы.Перезапустить.КнопкаПоУмолчанию = Истина;
		Возврат;
		
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаМастерНастройки;
	Элементы.Запустить.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастроек", ЭтаФорма);
	
	ОткрытьФорму(
		"ВнешняяОбработка.Чпоньк.Форма.Настройки",
		,
		ЭтаФорма,
		УникальныйИдентификатор,
		,
		,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Функция ПодключитьРасширение()
	
	СостояниеЗапуска = "Подключение расширения";
	
	ФайлРасширения = Новый ДвоичныеДанные(ЗначениеНастройки("ФайлРасширения"));
	АдресХранилища = ПоместитьВоВременноеХранилище(ФайлРасширения, УникальныйИдентификатор);
	
	Возврат ПодключитьРасширениеНаСервере(АдресХранилища);
	
КонецФункции

&НаКлиенте
Асинх Процедура ОткрытьФайлКоманда(Команда)
	
	Файл = Ждать ВыбратьПодключаемыйФайл();
	ПрочитатьФайл(Файл);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура Удалить(Команда)
	
	Если Элементы.Файлы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Файлы.Количество() = 1 Тогда
		
		Если РасширениеПодключено()
			И Ждать ВопросАсинх("Отключить расширение?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да
			И Не ОтключитьРасширение() Тогда
			
			Возврат;
			
		КонецЕсли;
		
		УдалитьНастройкиИзХранилища();
		
	КонецЕсли;
	
	ФайлыПередУдалением();
	Файлы.Удалить(Файлы.Индекс(Элементы.Файлы.ТекущиеДанные));
	
	Если Файлы.Количество() > 0 Тогда
		
		ЗаписатьЗаменяющиеМетодыВНастройки();
		ЗаписатьФайлыВНастройки();
		
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Подключен", Ложь);
	НеподключенныеФайлы = Файлы.НайтиСтроки(ПараметрыОтбора);
	
	Элементы.Перезапустить.Видимость = НеподключенныеФайлы.Количество() > 0 И Файлы.Количество() > 0;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РасширениеПодключено()
	
	Отбор = Новый Структура("Имя", "Чпоньк");
	НайденныеРасширения = РасширенияКонфигурации.Получить(Отбор);
	
	Возврат НайденныеРасширения.Количество() > 0 И НайденныеРасширения[0].Активно;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОтключитьРасширение()
	
	Отбор = Новый Структура("Имя", "Чпоньк");
	НайденныеРасширения = РасширенияКонфигурации.Получить(Отбор);
	
	Если НайденныеРасширения.Количество() = 0 Тогда
		Возврат Истина;
		
	КонецЕсли;
	
	Попытка
		НайденныеРасширения[0].Удалить();
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьНастройкиИзХранилища()
	
	ХранилищеОбщихНастроек.Удалить("Чпоньк", "ЗамещающиеМетоды", ИмяПользователя());
	ХранилищеОбщихНастроек.Удалить("Чпоньк", "ПодключенныеФайлы", ИмяПользователя());
	
КонецПроцедуры

&НаКлиенте
Функция СобратьРасширение()
	
	СостояниеЗапуска = "Сборка расширения";
	
	Файл = Новый Файл(Файлы[0].ПолноеИмя);
	ФайлСкрипта = СтрШаблон("%1Чпоньк.ps1", Файл.Путь);
	
	РезультатСборки = ВыполнитьPowerShellСкрипт(ФайлСкрипта, "build");
	
	Если Не РезультатСборки Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не удалось собрать расширение.'");
		Сообщение.Сообщить();
		
		СостояниеЗапуска = НСтр("ru = 'Сборка не завершена'");
		
	Иначе
		СостояниеЗапуска = НСтр("ru = 'Сборка успешно завершена'");
	КонецЕсли;
	
	Возврат РезультатСборки;
	
КонецФункции

&НаКлиенте
Асинх Процедура ВыгрузитьФайлВерсий()
	
	СтрокаПодключения = СтрЗаменить(СтрокаСоединенияИнформационнойБазы(), """", """""");
	ИсполняемыйФайлПриложения = ЗначениеНастройки("ИсполняемыйФайл1с");
	КаталогВыгрузки = АдресФайлаВерсий;
	
	СтрокаКоманды = СтрШаблон("%1 DESIGNER /IBConnectionString ""%2"" /DumpConfigToFiles ""%3"" -configDumpInfoOnly",
		ИсполняемыйФайлПриложения,
		СтрокаПодключения,
		КаталогВыгрузки);
	
	КодВозврата = Ждать ЗапуститьПриложениеАсинх(СтрокаКоманды, , Истина);
	
	Если КодВозврата <> 0 Тогда
		ВызватьИсключение "Не удалось выгрузить файл конфигурации. Возможно конфигурация открыта другим пользователем в режиме конфигуратора";
	КонецЕсли;
	
	ОбновитьВидимостьЭлементовПоФайлуВерсий(АдресФайлаВерсий)
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПриОткрытииПосле() Экспорт
	
	АдресФайлаВерсий = ЗначениеНастройки("ФайлВерсий");
	ОбновитьВидимостьЭлементовПоФайлуВерсий(АдресФайлаВерсий);
	ПустойСерверныйМетод();
	Элементы.АдресФайлаВерсий.ОбновитьТекстРедактирования();
	ИспользоватьCom = ЗначениеНастройки("ИспользоватьCom");
	АдресПубликацииHTTPСервиса = ЗначениеНастройки("HTTPСервис");
	УстановитьДоступностьШаг3();
	Элементы.АдресПубликацииHTTPСервиса.Видимость = Не ИспользоватьCom;
	
КонецПроцедуры

&НаСервере
Функция ПервыйЗапуск()
	
	Возврат ХранилищеОбщихНастроек.Загрузить("Чпоньк", "ЗамещающиеМетоды") = Неопределено;
	
КонецФункции

&НаКлиенте
Асинх Функция ДобавитьЗаписьВФайлы(Файл)
	
	ЗаписьФайлы = Файлы.Добавить();
	ЗаписьФайлы.Имя = Файл.Имя;
	ЗаписьФайлы.ПолноеИмя = Файл.ПолноеИмя;
	ЗаписьФайлы.ВремяИзменения = Ждать Файл.ПолучитьВремяИзмененияАсинх();
	
	ФайлыПриИзменении();
	
	Возврат ЗаписьФайлы;
	
КонецФункции

&НаСервере
Процедура ЗаписатьЗаменяющиеМетодыВНастройки()
	
	СтруктураНастроек = Новый Соответствие;
	
	ШаблонНастроекМетода = Новый Структура;
	Колонки = ВыбранныеМетоды.Выгрузить().Колонки;
	Для Каждого Колонка Из Колонки Цикл
		ШаблонНастроекМетода.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Для Каждого ОписаниеМетода Из ВыбранныеМетоды Цикл
		
		НастройкиМетода = Новый Структура(Новый ФиксированнаяСтруктура(ШаблонНастроекМетода));
		ЗаполнитьЗначенияСвойств(НастройкиМетода, ОписаниеМетода);
		СтруктураНастроек.Вставить(ОписаниеМетода.Ключ, НастройкиМетода);
		
	КонецЦикла;
	
	ХранилищеОбщихНастроек.Сохранить("Чпоньк", "ЗамещающиеМетоды", СтруктураНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьФайлыВНастройки()
	
	Настройки = Новый Соответствие;
	
	ШаблонОписания = Новый Структура;
	Колонки = Файлы.Выгрузить().Колонки;
	Для Каждого Колонка Из Колонки Цикл
		ШаблонОписания.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Для Каждого Файл Из Файлы Цикл
		
		ОписаниеФайла = Новый Структура(Новый ФиксированнаяСтруктура(ШаблонОписания));
		ЗаполнитьЗначенияСвойств(ОписаниеФайла, Файл);
		Настройки.Вставить(НРег(ОписаниеФайла.ПолноеИмя), ОписаниеФайла);
		
	КонецЦикла;
	
	ХранилищеОбщихНастроек.Сохранить("Чпоньк", "ПодключенныеФайлы", Настройки);
	
КонецПроцедуры

&НаСервере
Функция ПодключитьРасширениеНаСервере(АдресХранилища)
	
	ДанныеРасширения = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Отбор = Новый Структура("Имя", "Чпоньк");
	НайденныеРасширения = РасширенияКонфигурации.Получить(Отбор);
	
	Если НайденныеРасширения.Количество() > 0 Тогда
		Расширение = НайденныеРасширения[0];
	Иначе
		Расширение = РасширенияКонфигурации.Создать();
	КонецЕсли;
	
	Расширение.БезопасныйРежим = Ложь;
	Расширение.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
	Расширение.ОбластьДействия = ОбластьДействияРасширенияКонфигурации.ИнформационнаяБаза;
	
	Попытка
		Расширение.Записать(ДанныеРасширения);
		Результат = Истина;
	Исключение
		Сообщить(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Асинх Функция ПрочитатьФайлВерсий(Приемник)
	
	ИмяФайла = СтрШаблон("%1\ConfigDumpInfo.xml", АдресФайлаВерсий);
	
	Файл = Новый Файл(ИмяФайла);
	ФайлСуществует = Ждать Файл.СуществуетАсинх();
	
	Если ФайлСуществует = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПоРусски = Перевод("ЕдинственноеАнглийский", "МножественноеРусский");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла, , , "UTF-8");
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя <> "Metadata" Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяМетаданных = ЧтениеXML.ПолучитьАтрибут("name");
		ЧастиИмени = СтрРазделить(ИмяМетаданных, ".");
		
		Если ПоРусски[ЧастиИмени[0]] = Неопределено Тогда
			ЧтениеXML.Пропустить();
			Продолжить;
		КонецЕсли;
		
		Если ЧастиИмени.Количество() > 3 И ПоРусски[ЧастиИмени[2]] = Неопределено Тогда
			ЧтениеXML.Пропустить();
			Продолжить;
		КонецЕсли;
		
		Если Не (ЧастиИмени.Количество() = 2 Или ЧастиИмени.Количество() = 4) Тогда
			ЧтениеXML.Пропустить();
			Продолжить;
		КонецЕсли;
		
		Класс = ПоРусски[ЧастиИмени[0]];
		_Объект = ЧастиИмени[1];
		Ключ = СтрШаблон("%1.%2", Класс, _Объект);
		
		Если ЧастиИмени.Количество() = 4 Тогда
			
			Класс = ПоРусски[ЧастиИмени[2]];
			_Объект = ЧастиИмени[3];
			Ключ = СтрШаблон("%1.%2", Ключ, _Объект);
			
		КонецЕсли;
		
		Если Приемник.НайтиСтроки(Новый Структура("Ключ", Ключ)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = Приемник.Добавить();
		НоваяЗапись.Ключ = Ключ;
		НоваяЗапись.ПолноеИмя = ИмяМетаданных;
		НоваяЗапись.Класс = Класс;
		НоваяЗапись.Объект = _Объект;
		НоваяЗапись.Идентификатор = ЧтениеXML.ПолучитьАтрибут("id");
		
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Асинх Функция ЗаполнитьОбъектыКонфигурацииИзФайлаВерсий()
	
	Объект.ОбъектыКонфигурации.Очистить();
	
	Если Не(Ждать ПрочитатьФайлВерсий(Объект.ОбъектыКонфигурации)) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не удалось прочитать файл версий. Выгрузите и повторите еще раз'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	НоваяЗапись = Объект.ОбъектыКонфигурации.Добавить();
	НоваяЗапись.Класс = "ОбщиеМодули";
	НоваяЗапись.Объект = "Чпоньк";
	НоваяЗапись.Ключ = "ОбщиеМодули.Чпоньк";
	НоваяЗапись.ПолноеИмя = "CommonModule.Чпоньк";
	НоваяЗапись.Идентификатор = XMLСтрока(Новый УникальныйИдентификатор);
	
	Возврат Истина;
	
КонецФункции

#Область СозданиеФайловРасширения

&НаКлиенте
Асинх Функция СформироватьФайлыРасширения()
	
	СостояниеЗапуска = "Формируются файлы расширения";
	
	ДанныеЗаполнения = ДанныеЗаполненияДляВыбранныхМетодов();
	КлючиПодчиненныхОбъектов = МассивКлючей(ДанныеЗаполнения);
	
	КлючиОбъектовПрограммы = Ждать СформироватьФайлыПрограммы();
	ДополнитьМассив(КлючиПодчиненныхОбъектов, КлючиОбъектовПрограммы);
	Ждать СформироватьФайлКонфигурации(КлючиПодчиненныхОбъектов);
	Ждать СформироватьФайлВерсииОбъектов(ДанныеЗаполнения);
	Ждать СформироватьФайлЯзыкаКонфигурации();
	
	Ждать СформироватьФайлыМодулей(ДанныеЗаполнения);
	
	СостояниеЗапуска = "Файлы расширения сформированы";
	
КонецФункции

&НаКлиенте
Процедура ДополнитьМассив(Исходный, Добавляемый)
	
	Для Каждого Элемент Из Добавляемый Цикл
		Исходный.Добавить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция МассивКлючей(Коллекция)
	
	МассивКлючей = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из Коллекция Цикл
		МассивКлючей.Добавить(ЭлементКоллекции.Ключ);
	КонецЦикла;
	
	Возврат МассивКлючей;
	
КонецФункции

&НаКлиенте
Функция ДанныеЗаполненияДляВыбранныхМетодов()
	
	ДанныеЗаполнения = Новый Соответствие;
	
	ПоАнглийски = Перевод("ЕдинственноеРусский", "ЕдинственноеАнглийский");
	ВЕдинственномЧисле = Перевод("МножественноеРусский", "ЕдинственноеРусский");
	
	Для Каждого Метод Из ВыбранныеМетоды Цикл
		
		Ключ = Метод.Ключ;
		ЧастиКлюча = СтрРазделить(Ключ, "-");
		ЧастиИмениМодуля = СтрРазделить(ЧастиКлюча[1], ".");
		
		Если ЧастиИмениМодуля.Количество() = 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(НСтр("ru = 'Не указан ключ объекта для метода <%1>. Метод пропущен'"), Метод.Метод);
			Сообщение.Сообщить();
			Продолжить;
			
		КонецЕсли;
		
		Если ЧастиИмениМодуля.Количество() > 3
			И Не ЗначениеЗаполнено(Метод.Событие) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(НСтр("ru = 'Не указано событие для метода <%1>. Метод пропущен'"), Метод.Метод);
			Сообщение.Сообщить();
			Продолжить;
			
		КонецЕсли;
		
		Модуль = "";
		
		Если ЧастиИмениМодуля.Количество() = 1 Тогда
			
			Класс = "ОбщиеМодули";
			_Объект = ЧастиИмениМодуля[0];
			
		Иначе
			
			Класс = ЧастиИмениМодуля[0];
			_Объект = ЧастиИмениМодуля[1];
			Модуль = ЧастиИмениМодуля[2];
			
		КонецЕсли;
		
		КлючОбъекта = СтрШаблон("%1.%2", Класс, _Объект);
		ОписаниеОбъекта = ДанныеЗаполнения[КлючОбъекта];
		
		Если ОписаниеОбъекта = Неопределено Тогда
			ОписаниеОбъекта = НовоеОписаниеОбъекта(Класс, _Объект);
		КонецЕсли;
		
		ИмяФайлаМодуля = ФайлМодуля(Класс, Модуль);
		
		Если ИмяФайлаМодуля = Неопределено Тогда
			// тогда это не модуль, а подчиненный объект
			
			ОписаниеПодчиненногоОбъекта = ОписаниеОбъекта.ПодчиненныеОбъекты[Модуль];
			
			Если ОписаниеПодчиненногоОбъекта = Неопределено Тогда
				
				КлючПодчиненногоОбъекта = СтрШаблон("%1.%2.%3", Класс, _Объект, Модуль);
				ОписаниеПодчиненногоОбъекта = НовоеОписаниеПодчиненногоОбъекта(Класс, _Объект, Модуль);
				
				Если ОписаниеПодчиненногоОбъекта = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ОписаниеПодчиненногоОбъекта.ИдентификаторРасширяемогоОбъекта = ИдентификаторОбъекта(КлючПодчиненногоОбъекта);
				
			КонецЕсли;
			
			ДобавитьОписаниеМетодаВКоллекцию(ОписаниеПодчиненногоОбъекта.Методы, Метод);
			
			Если ОписаниеПодчиненногоОбъекта.Тип = "Форма" Тогда
				
				Если ЧастиИмениМодуля.Количество() = 3 И ЗначениеЗаполнено(Метод.Событие) Тогда
					
					ОписаниеПодчиненногоОбъекта.События.Добавить(НовоеОписаниеСобытия(Метод));
					
				КонецЕсли;
				
				Если ЧастиИмениМодуля.Количество() = 4 Тогда
					
					ИмяЭлемента = ЧастиИмениМодуля[3];
					
					ОписаниеЭлементаФормы = ОписаниеПодчиненногоОбъекта.Элементы[ИмяЭлемента];
					
					Если ОписаниеЭлементаФормы = Неопределено Тогда
						
						Форма = ПолучитьФорму(СтрШаблон("%1.%2.Форма.%3", ВЕдинственномЧисле[Класс], _Объект, Модуль));
						
						Если Форма = Неопределено Тогда
							// если в обработчике ПриСозданииНаСервере установлен признак отказа от создания формы.
							Продолжить;
						КонецЕсли;
						
						ТипЭлемента = СтрЗаменить(Строка(ТипЗнч(Форма.Элементы.Найти(ИмяЭлемента))), " ", "");
						
						ОписаниеЭлементаФормы = Новый Структура;
						ОписаниеЭлементаФормы.Вставить("Тип", ТипЭлемента);
						ОписаниеЭлементаФормы.Вставить("События", Новый Массив);
						
					КонецЕсли;
					
					// есть некоторые ошибки при расширении событий таблицы формы https://github.com/1C-Company/1c-edt-issues/issues/1517
					Если ВРег(ОписаниеЭлементаФормы.Тип) = "ПОЛЕФОРМЫ" Тогда
						
						ОписаниеЭлементаФормы.События.Добавить(НовоеОписаниеСобытия(Метод));
						ОписаниеПодчиненногоОбъекта.Элементы.Вставить(ИмяЭлемента, ОписаниеЭлементаФормы);
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ОписаниеОбъекта.ДанныеЗаполнения.ПодчиненныеОбъекты[Модуль] = Неопределено Тогда
					
					ПодчиненныйОбъект = СтрШаблон("<Form>%1</Form>", Модуль);
					ОписаниеОбъекта.ДанныеЗаполнения.ПодчиненныеОбъекты.Вставить(Модуль, ПодчиненныйОбъект);
					
				КонецЕсли;
				
			Иначе
				
				Если ОписаниеОбъекта.ДанныеЗаполнения.ПодчиненныеОбъекты[Модуль] = Неопределено Тогда
					
					ОписаниеПодчиненногоОбъекта.Вставить("Имя", Модуль);
					ШаблонОписания_Команды = ТекстИзМакета("ШаблонОписания_Команды");
					ПодчиненныйОбъект = ЗаполнитьШаблон(ШаблонОписания_Команды, ОписаниеПодчиненногоОбъекта);
					ОписаниеОбъекта.ДанныеЗаполнения.ПодчиненныеОбъекты.Вставить(Модуль, ПодчиненныйОбъект);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ОписаниеОбъекта.ПодчиненныеОбъекты.Вставить(Модуль, ОписаниеПодчиненногоОбъекта);
			
		Иначе
			
			ОписаниеМодуля = ОписаниеОбъекта.Модули[Модуль];
			
			Если ОписаниеМодуля = Неопределено Тогда
				
				ФайлМодуля = СтрШаблон("%1%2%3%4",
					ОписаниеКласса(Класс).БазовыйПуть,
					ЗначениеНастройки("РазделительДиректорий"),
					_Объект,
					ИмяФайлаМодуля);
				
				ОписаниеМодуля = Новый Структура;
				ОписаниеМодуля.Вставить("Файл", ФайлМодуля);
				ОписаниеМодуля.Вставить("Класс", Класс);
				ОписаниеМодуля.Вставить("Методы", Новый Массив);
				
			КонецЕсли;
			
			ДобавитьОписаниеМетодаВКоллекцию(ОписаниеМодуля.Методы, Метод);
			
			ОписаниеОбъекта.Модули.Вставить(Модуль, ОписаниеМодуля);
			
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить(КлючОбъекта, ОписаниеОбъекта);
		
	КонецЦикла;
	
	Для Каждого ОписаниеОбъекта Из ДанныеЗаполнения Цикл
		ПодчиненныеОбъекты = МассивЗначений(ОписаниеОбъекта.Значение.ДанныеЗаполнения.ПодчиненныеОбъекты);
		ОписаниеОбъекта.Значение.ДанныеЗаполнения.ПодчиненныеОбъекты = СтрСоединить(ПодчиненныеОбъекты, Символы.ПС);
	КонецЦикла;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

&НаКлиенте
Функция МассивЗначений(Коллекция)
	
	МассивЗначений = Новый Массив;
	
	Для Каждого ЭлементиКоллекции Из Коллекция Цикл
		МассивЗначений.Добавить(ЭлементиКоллекции.Значение);
	КонецЦикла;
	
	Возврат МассивЗначений;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьОписаниеМетодаВКоллекцию(Коллекция, Метод)
	
	СвойстваОписания = "Аннотация,ДирективаКомпиляции,ТипМетода,Метод,РасширяемыйМетод,Параметры,Экспорт,Событие,Ключ";
	ОписаниеМетода = Новый Структура(СвойстваОписания);
	ЗаполнитьЗначенияСвойств(ОписаниеМетода, Метод);
	Коллекция.Добавить(ОписаниеМетода);
	
КонецПроцедуры

&НаКлиенте
Функция НовоеОписаниеОбъекта(Класс, _Объект)
	
	ОписаниеКласса = ОписаниеКласса(Класс);
	ФайлОписания = СтрШаблон("%1%2%3",
		ОписаниеКласса.БазовыйПуть,
		ЗначениеНастройки("РазделительДиректорий"),
		СтрЗаменить(ОписаниеКласса.ФайлОписания, "{Объект}", _Объект));
	
	ДанныеЗаполнения = ДанныеЗаполненияОбъекта(ОписаниеКласса, _Объект);
	
	Если ДанныеЗаполнения.Свойство("ИдентификаторРасширяемогоОбъекта") Тогда
		Ключ = СтрШаблон("%1.%2", Класс, _Объект);
		ДанныеЗаполнения.ИдентификаторРасширяемогоОбъекта = ИдентификаторОбъекта(Ключ);
	КонецЕсли;
	
	ОписаниеОбъекта = Новый Структура;
	ОписаниеОбъекта.Вставить("ФайлОписания", ФайлОписания);
	ОписаниеОбъекта.Вставить("ШаблонОписания", ОписаниеКласса.ШаблонОписания);
	ОписаниеОбъекта.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
	ОписаниеОбъекта.Вставить("Модули", Новый Соответствие);
	ОписаниеОбъекта.Вставить("ПодчиненныеОбъекты", Новый Соответствие);
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

&НаСервере
Функция ДанныеЗаполненияОбъекта(Знач ОписаниеКласса, Знач _Объект)
	
	Шаблон = ТекстИзМакета(ОписаниеКласса.ШаблонОписания);
	ДанныеЗаполнения = ПараметрыШаблона(Шаблон);
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Метаданные[ОписаниеКласса.Класс][_Объект]);
	
	Если ДанныеЗаполнения.Свойство("ПодчиненныеОбъекты") Тогда
		ДанныеЗаполнения.ПодчиненныеОбъекты = Новый Соответствие;
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

&НаСервере 
Функция НовоеОписаниеПодчиненногоОбъекта(РодительскийКласс, РодительскийОбъект, _Объект)
	
	ОписаниеРодительскогоКласса = ОписаниеКласса(РодительскийКласс);
	
	Если ОписаниеРодительскогоКласса.Формы 
		И Метаданные[РодительскийКласс][РодительскийОбъект].Формы.Найти(_Объект) <> Неопределено Тогда
		
		Возврат НовоеОписаниеФормы(ОписаниеРодительскогоКласса, РодительскийОбъект, _Объект);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НовоеОписаниеФормы(ОписаниеРодительскогоКласса, РодительскийОбъект, _Объект)
	
	ОписаниеПодчиненногоОбъекта = Новый Структура;
	РазделитьДиректорий = ЗначениеНастройкиНаСервере("РазделительДиректорий");
	
	ОписаниеКлассаФормы = ОписаниеКласса("Формы");
	
	БазовыйПуть = СтрШаблон("%1%2%3%2%4%2",
		ОписаниеРодительскогоКласса.БазовыйПуть,
		РазделитьДиректорий,
		РодительскийОбъект,
		ОписаниеКлассаФормы.БазовыйПуть);
	
	ФайлОписания = СтрШаблон("%1%2",
		БазовыйПуть,
		СтрЗаменить(ОписаниеКлассаФормы.ФайлОписания, "{Объект}", _Объект));
	
	ФайлФормы = СтрШаблон("%1%2%3",
		БазовыйПуть,
		_Объект,
		СтрЗаменить("\Ext\Form.xml", "\", РазделитьДиректорий));
	
	ФайлМодуля = СтрШаблон("%1%2%3",
		БазовыйПуть,
		_Объект,
		СтрЗаменить(ФайлМодуляНаСервере("Формы", ""), "\", РазделитьДиректорий));
	
	ОписаниеПодчиненногоОбъекта.Вставить("Тип", "Форма");
	ОписаниеПодчиненногоОбъекта.Вставить("ИдентификаторРасширяемогоОбъекта");
	ОписаниеПодчиненногоОбъекта.Вставить("ФайлОписания", ФайлОписания);
	ОписаниеПодчиненногоОбъекта.Вставить("ШаблонОписания", ОписаниеКлассаФормы.ШаблонОписания);
	ОписаниеПодчиненногоОбъекта.Вставить("ФайлФормы", ФайлФормы);
	ОписаниеПодчиненногоОбъекта.Вставить("ШаблонФайлаФормы", "ШаблонФайлаФормы");
	ОписаниеПодчиненногоОбъекта.Вставить("ФайлМодуля", ФайлМодуля);
	ОписаниеПодчиненногоОбъекта.Вставить("События", Новый Массив);
	ОписаниеПодчиненногоОбъекта.Вставить("Методы", Новый Массив);
	ОписаниеПодчиненногоОбъекта.Вставить("Элементы", Новый Соответствие);
	
	Возврат ОписаниеПодчиненногоОбъекта;
	
КонецФункции

&НаКлиенте
Функция НовоеОписаниеСобытия(ОписаниеМетода)
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Имя", ОписаниеМетода.Событие);
	ОписаниеСобытия.Вставить("ТипВызова", ОписаниеМетода.Аннотация);
	ОписаниеСобытия.Вставить("Метод", ОписаниеМетода.Метод);
	
	Возврат ОписаниеСобытия;
	
КонецФункции

&НаСервере
Функция ТекстИзМакета(Знач ИмяМакета)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Возврат Обработка.ТекстИзМакета(ИмяМакета);
	
КонецФункции

&НаКлиенте
Функция ФайлМодуля(Класс, Модуль)
	
	ИмяФайла = Неопределено;
	
	ПараметрыОтбора = Новый Структура("Класс, Модуль", Класс, Модуль);
	НайденныеМодулиКлассов = Объект.МодулиКлассов.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеМодулиКлассов.Количество() > 0 Тогда
		ИмяФайла = НайденныеМодулиКлассов[0].ИмяФайла;
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции

&НаСервере
Функция ФайлМодуляНаСервере(Класс, Модуль)
	
	ИмяФайла = Неопределено;
	
	ПараметрыОтбора = Новый Структура("Класс, Модуль", Класс, Модуль);
	НайденныеМодулиКлассов = Объект.МодулиКлассов.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеМодулиКлассов.Количество() > 0 Тогда
		ИмяФайла = НайденныеМодулиКлассов[0].ИмяФайла;
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции

&НаСервере
Функция ОписаниеКласса(Знач Класс)
	
	ОписаниеКласса = Неопределено;
	ПараметрыОтбора = Новый Структура("Класс", Класс);
	НайденныеСтроки = Объект.ОписанияКлассов.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ТаблицаОписания = Объект.ОписанияКлассов.Выгрузить(НайденныеСтроки);
		ОписаниеКласса = Новый Структура;
		
		Для Каждого Колонка Из ТаблицаОписания.Колонки Цикл
			ОписаниеКласса.Вставить(Колонка.Имя, ТаблицаОписания[0][Колонка.Имя]);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОписаниеКласса;
	
КонецФункции

&НаКлиенте
Асинх Функция СформироватьФайлыПрограммы()
	
	КлючиОбъектов = Новый Массив;
	
	ШаблонОписания_ОбщиеМодули = ТекстИзМакета("ШаблонОписания_ОбщиеМодули");
	ИмяОбъекта = "Чпоньк";
	ДанныеЗаполнения = НовыеДанныеЗаполненияОбщегоМодуля(ШаблонОписания_ОбщиеМодули);
	ДанныеЗаполнения.Имя = ИмяОбъекта;
	ДанныеЗаполнения.ВызовСервера = Истина;
	ДанныеЗаполнения.ВнешнееСоединение = Истина;
	
	ИмяФайлаОписания = СтрШаблон("CommonModules\%1.xml", ИмяОбъекта);
	ИмяФайлаОписания = Ждать ПолныйПутьВыгрузкиРасширения(ИмяФайлаОписания);
	Содержимое = ЗаполнитьШаблон(ШаблонОписания_ОбщиеМодули, ДанныеЗаполнения);
	Ждать ЗаписатьВФайл(ИмяФайлаОписания, Содержимое);
	
	ИмяФайлаМодуля = СтрШаблон("CommonModules\%1%2", ИмяОбъекта, ФайлМодуля("ОбщиеМодули", ""));
	ИмяФайлаМодуля = Ждать ПолныйПутьВыгрузкиРасширения(ИмяФайлаМодуля);
	ШаблонМодуляЧпоньк = ТекстИзМакета(ИмяОбъекта);
	Содержимое = ЗаполнитьШаблон(ШаблонМодуляЧпоньк, Новый Структура);
	Ждать ЗаписатьВФайл(ИмяФайлаМодуля, Содержимое);
	
	КлючиОбъектов.Добавить("ОбщиеМодули.Чпоньк");
	
	Если ЗначениеЗаполнено(ЗначениеНастройки("HTTPСервис")) Тогда
		
		ШаблонОписания_HTTPСервисы = ТекстИзМакета("ШаблонОписания_HTTPСервисы");
		ДанныеЗаполнения = ДанныеЗаполненияHTTPСервисаПоURL(ЗначениеНастройки("HTTPСервис"));
		ИмяФайлаОписания = СтрШаблон("HTTPServices\%1.xml", ДанныеЗаполнения.Имя);
		ИмяФайлаОписания = Ждать ПолныйПутьВыгрузкиРасширения(ИмяФайлаОписания);
		Содержимое = ЗаполнитьШаблон(ШаблонОписания_HTTPСервисы, ДанныеЗаполнения);
		Ждать ЗаписатьВФайл(ИмяФайлаОписания, Содержимое);
		
		ИмяФайлаМодуля = СтрШаблон("HTTPServices\%1%2", ДанныеЗаполнения.Имя, ФайлМодуля("HTTPСервисы", ""));
		ИмяФайлаМодуля = Ждать ПолныйПутьВыгрузкиРасширения(ИмяФайлаМодуля);
		ШаблонМодуляЧпоньк = ТекстИзМакета("HTTPСервис");
		Содержимое = ЗаполнитьШаблон(ШаблонМодуляЧпоньк, ДанныеЗаполнения);
		Ждать ЗаписатьВФайл(ИмяФайлаМодуля, Содержимое);
		
		КлючиОбъектов.Добавить(СтрШаблон("HTTPСервисы.%1", ДанныеЗаполнения.Имя));
		
	КонецЕсли;
	
	Возврат КлючиОбъектов;
	
КонецФункции

&НаСервере
Функция ДанныеЗаполненияHTTPСервисаПоURL(URL)
	
	ДанныеЗаполнения = Новый Структура("Имя,Обработчик,ИдентификаторРасширяемогоОбъекта,Идентификатор_0");
	
	АдресПубликацииСервиса = Сред(URL, СтрНайти(URL, "/hs/") + 4);
	ЧастиАдреса = СтрРазделить(АдресПубликацииСервиса, "/", Истина);
	
	КорневойURL = ЧастиАдреса[0];
	
	ШаблонURL = "/*";
	Если ЧастиАдреса.Количество() > 1 И ЗначениеЗаполнено(ЧастиАдреса[1]) Тогда
		ШаблонURL = ЧастиАдреса[1];
	КонецЕсли;
	
	HTTPСервис = Неопределено;
	
	Для Каждого ОбъектМетаданных Из Метаданные.HTTPСервисы Цикл
		
		Если НРег(ОбъектМетаданных.КорневойURL) = НРег(КорневойURL) Тогда
			
			HTTPСервис = ОбъектМетаданных;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если HTTPСервис = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось определить HTTP сервис по URL'");
	КонецЕсли;
	
	Ресурс = Неопределено;
	
	Для Каждого ОбъектМетаданных Из HTTPСервис.ШаблоныURL Цикл
		
		Если НРег(ОбъектМетаданных.Шаблон) = НРег(ШаблонURL) Тогда
			
			Ресурс = ОбъектМетаданных;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Ресурс = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось определить шаблон URL HTTP сервиса <%1>'"), HTTPСервис.Имя);
	КонецЕсли;
	
	Обработчик = Неопределено;
	
	Для Каждого ОбъектМетаданных Из Ресурс.Методы Цикл
		
		Если Строка(ОбъектМетаданных.HTTPМетод) = "POST" Тогда
			
			Обработчик = ОбъектМетаданных.Обработчик;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Обработчик = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось найти метод POST HTTP сервиса <%1>'"), HTTPСервис.Имя);
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Ключ", СтрШаблон("HTTPСервисы.%1", HTTPСервис.Имя));
	НайденныеСтроки = Объект.ОбъектыКонфигурации.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось определить идентификатор объекта HTTP сервиса <%1>'"), HTTPСервис.Имя);
	КонецЕсли;
	
	ДанныеЗаполнения.Имя = HTTPСервис.Имя;
	ДанныеЗаполнения.Обработчик = Обработчик;
	ДанныеЗаполнения.ИдентификаторРасширяемогоОбъекта = НайденныеСтроки[0].Идентификатор;
	ДанныеЗаполнения.Идентификатор_0 = Строка(Новый УникальныйИдентификатор);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

&НаКлиенте
Функция НовыеДанныеЗаполненияОбщегоМодуля(Шаблон)
	
	ДанныеЗаполнения = ПараметрыШаблона(Шаблон);
	ДанныеЗаполнения.Глобальный = Ложь;
	ДанныеЗаполнения.КлиентУправляемоеПриложение = Ложь;
	ДанныеЗаполнения.Сервер = Истина;
	ДанныеЗаполнения.ВнешнееСоединение = Ложь;
	ДанныеЗаполнения.КлиентОбычноеПриложение = Ложь;
	ДанныеЗаполнения.ВызовСервера = Ложь;
	ДанныеЗаполнения.Привилегированный = Ложь;
	ДанныеЗаполнения.ИдентификаторРасширяемогоОбъекта = Новый УникальныйИдентификатор;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

&НаКлиенте
Функция КлючМодуля(Класс, Модуль)
	Возврат СтрШаблон("%1.%2", Класс, Модуль);
КонецФункции

&НаКлиенте
Асинх Функция СформироватьФайлЯзыкаКонфигурации()
	
	ИмяФайла = Ждать ПолныйПутьВыгрузкиРасширения("Languages\Русский.xml");
	
	ШаблонОписания_Языки = ТекстИзМакета("ШаблонОписания_Языки");
	Содержимое = ЗаполнитьШаблон(ШаблонОписания_Языки, ПараметрыШаблона(ШаблонОписания_Языки));
	
	Ждать ЗаписатьВФайл(ИмяФайла, Содержимое);
	
КонецФункции

&НаКлиенте
Асинх Функция СформироватьФайлВерсииОбъектов(ДанныеЗаполнения)
	
	ИмяФайла = Ждать ПолныйПутьВыгрузкиРасширения("ConfigDumpInfo.xml");
	
	Содержимое = ТекстИзМакета("ШаблонФайлаВерсий");
	Ждать ЗаписатьВФайл(ИмяФайла, Содержимое);
	
КонецФункции

&НаКлиенте
Функция ИдентификаторОбъекта(Ключ)
	
	ИдентификаторОбъекта = "";
	
	ПараметрыОтбора = Новый Структура("Ключ", Ключ);
	ИдентификаторыОбъектов = Объект.ОбъектыКонфигурации.НайтиСтроки(ПараметрыОтбора);
	
	Если ИдентификаторыОбъектов.Количество() > 0 Тогда
		ИдентификаторОбъекта = ИдентификаторыОбъектов[0].Идентификатор;
	КонецЕсли;
	
	Возврат ИдентификаторОбъекта;
	
КонецФункции

&НаКлиенте
Асинх Функция СформироватьФайлКонфигурации(КлючиПодчиненныхОбъектов)
	
	ШаблонОписания_Конфигурация = ТекстИзМакета("ШаблонОписания_Конфигурация");
	
	ДанныеЗаполнения = ПараметрыШаблона(ШаблонОписания_Конфигурация);
	ДанныеЗаполнения.Версия = ВерсияПрограммы();
	ДанныеЗаполнения.ПодчиненныеОбъекты = ОписаниеПодчиненныхОбъектовКонфигурации(КлючиПодчиненныхОбъектов);
	ДанныеЗаполнения.Язык = "Русский";
	ДанныеЗаполнения.РежимСовместимости = РежимСовместимости();
	
	ИмяФайла = Ждать ПолныйПутьВыгрузкиРасширения("Configuration.xml");
	Содержимое = ЗаполнитьШаблон(ШаблонОписания_Конфигурация, ДанныеЗаполнения);
	Ждать ЗаписатьВФайл(ИмяФайла, Содержимое);
	
КонецФункции

&НаСервере
Функция РежимСовместимости()
	
	РежимСовместимости = Строка(Метаданные.РежимСовместимости);
	
	Если РежимСовместимости = "НеИспользовать" Тогда
		
		ВерсияПриложения = ЗначениеНастройкиНаСервере("ВерсияПриложения");
		ЧастиВерсии = СтрРазделить(ВерсияПриложения, ".");
		РежимСовместимости = СтрШаблон("Version%1_%2_%3", ЧастиВерсии[0], ЧастиВерсии[1], ЧастиВерсии[2]);
		
	Иначе
		
		РежимСовместимости = СтрЗаменить(РежимСовместимости, "Версия", "Version");
		
	КонецЕсли;
	
	Возврат РежимСовместимости;
	
КонецФункции

&НаСервере
Функция ВерсияПрограммы()
	
	НайденныеРасширения = РасширенияКонфигурации.Получить(Новый Структура("Имя", "Чпоньк"));
	
	Если НайденныеРасширения.Количество() = 0 Или ПустаяСтрока(НайденныеРасширения[0].Версия) Тогда
		Версия = "1.0.1.1";
	Иначе
		Версия = УвеличитьВерсию(НайденныеРасширения[0].Версия, "0.0.1.0");
	КонецЕсли;
	
	Возврат Версия;
	
КонецФункции

&НаСервере
Функция УвеличитьВерсию(Версия, Увеличение, Разделитель = ".")
	
	ЧастиВерсии = СтрРазделить(Версия, Разделитель);
	ЧастиУвеличения = СтрРазделить(Увеличение, Разделитель);
	ЧастиНовойВерсии = Новый Массив;
	
	Для Сч = 0 По ЧастиВерсии.ВГраница() Цикл
		
		ЧастьУвеличения = 0;
		
		Если Сч <= ЧастиУвеличения.ВГраница() Тогда
			ЧастьУвеличения = ЧастиУвеличения[Сч];
		КонецЕсли;
		
		ЧастиНовойВерсии.Добавить(Строка(Число(ЧастиВерсии[Сч]) + Число(ЧастьУвеличения)));
		
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиНовойВерсии, Разделитель);
	
КонецФункции

&НаКлиенте
Асинх Функция СформироватьФайлыМодулей(ДанныеЗаполнения)
	
	Для Каждого Объект_ Из ДанныеЗаполнения Цикл
		СформироватьФайлМодуляОбъекта(Объект_.Значение);
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ИмяФайлаВТекущейОС(ИмяФайла)
	
	РазделительДиректорий = ЗначениеНастройки("РазделительДиректорий");
	ДвойнойРазделитель = СтрШаблон("%1%1", РазделительДиректорий);
	
	ИмяФайла = СтрЗаменить(СтрЗаменить(ИмяФайла, "/", РазделительДиректорий), "\", РазделительДиректорий);
	ИмяФайла = СтрЗаменить(ИмяФайла, ДвойнойРазделитель, РазделительДиректорий);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура СформироватьФайлМодуляОбъекта(ОписаниеОбъекта)
	
	ИмяФайла = Ждать ПолныйПутьВыгрузкиРасширения(ОписаниеОбъекта.ФайлОписания);
	ШаблонОписания = ТекстИзМакета(ОписаниеОбъекта.ШаблонОписания);
	Содержимое = ЗаполнитьШаблон(ШаблонОписания, ОписаниеОбъекта.ДанныеЗаполнения);
	Ждать ЗаписатьВФайл(ИмяФайла, Содержимое);
	
	Для Каждого Модуль Из ОписаниеОбъекта.Модули Цикл
		
		ИмяФайла = Ждать ПолныйПутьВыгрузкиРасширения(Модуль.Значение.Файл);
		Содержимое = ТекстМодуля(Модуль.Значение.Методы);
		Содержимое = СтрШаблон("%1%2%2%3", Содержимое, Символы.ПС, ТекстыМетодовКонтроллеров(Модуль.Ключ, Модуль.Значение.Класс));
		Ждать ЗаписатьВФайл(ИмяФайла, Содержимое);
		
	КонецЦикла;
	
	ШаблонОписанияСобытия = "<Event name=""%1"" callType=""%2"">Чпоньк_%3</Event>";
	ПоАнглийски = Перевод("ЕдинственноеРусский", "ЕдинственноеАнглийский");
	
	Для Каждого ПодчиненныйОбъект Из ОписаниеОбъекта.ПодчиненныеОбъекты Цикл
		
		ОписаниеПодчиненногоОбъекта = ПодчиненныйОбъект.Значение;
		
		Если ОписаниеПодчиненногоОбъекта.Тип = "Форма" Тогда
			
			ШаблонОписания = ТекстИзМакета(ОписаниеПодчиненногоОбъекта.ШаблонОписания);
			
			ДанныеЗаполнения = ПараметрыШаблона(ШаблонОписания);
			ДанныеЗаполнения.Имя = ПодчиненныйОбъект.Ключ;
			ДанныеЗаполнения.ИдентификаторРасширяемогоОбъекта = ОписаниеПодчиненногоОбъекта.ИдентификаторРасширяемогоОбъекта;
			
			ИмяФайла = Ждать ПолныйПутьВыгрузкиРасширения(ОписаниеПодчиненногоОбъекта.ФайлОписания);
			Содержимое = ЗаполнитьШаблон(ШаблонОписания, ДанныеЗаполнения);
			Ждать ЗаписатьВФайл(ИмяФайла, Содержимое);
			
			СобытияФормы = Новый Массив;
			
			Для Каждого СобытиеФормы Из ОписаниеПодчиненногоОбъекта.События Цикл
				
				ОписаниеСобытия = СтрШаблон(ШаблонОписанияСобытия,
					ПоАнглийски[СобытиеФормы.Имя],
					ПоАнглийски[СобытиеФормы.ТипВызова],
					СобытиеФормы.Метод);
				
				СобытияФормы.Добавить(ОписаниеСобытия);
				
			КонецЦикла;
			
			ЭлементыФормы = Новый Массив;
			РасширяемыеЭлементы = Новый Массив;
			Счетчик = 1;
			
			Для Каждого ЭлементОбъекта Из ОписаниеПодчиненногоОбъекта.Элементы Цикл
				
				ОписаниеРасширяемогоЭлемента = СтрШаблон("<InputField name=""%1"" id=""%2""/>",
					ЭлементОбъекта.Ключ,
					Счетчик);
				
				РасширяемыеЭлементы.Добавить(ОписаниеРасширяемогоЭлемента);
				
				СобытияЭлемента = Новый Массив;
				
				Для Каждого Событие Из ЭлементОбъекта.Значение.События Цикл
					
					ОписаниеСобытия = СтрШаблон(ШаблонОписанияСобытия,
						ПоАнглийски[Событие.Имя],
						ПоАнглийски[Событие.ТипВызова],
						Событие.Метод);
					
					СобытияЭлемента.Добавить(ОписаниеСобытия);
					
				КонецЦикла;
				
				ОписаниеЭлемента = СтрШаблон("<InputField name=""%1"" id=""%2""><Events>%3</Events></InputField>",
					ЭлементОбъекта.Ключ,
					Счетчик,
					СтрСоединить(СобытияЭлемента, Символы.ПС));
				
				ЭлементыФормы.Добавить(ОписаниеЭлемента);
				
				Счетчик = Счетчик + 1;
				
			КонецЦикла;
			
			ШаблонФайлаФормы = ТекстИзМакета(ОписаниеПодчиненногоОбъекта.ШаблонФайлаФормы);
			
			ДанныеЗаполнения = ПараметрыШаблона(ШаблонФайлаФормы);
			ДанныеЗаполнения.СобытияФормы = СтрСоединить(СобытияФормы, Символы.ПС);
			ДанныеЗаполнения.Элементы = СтрСоединить(ЭлементыФормы, Символы.ПС);
			ДанныеЗаполнения.РасширяемыеЭлементы = СтрСоединить(РасширяемыеЭлементы, Символы.ПС);
			
			ИмяФайла = Ждать ПолныйПутьВыгрузкиРасширения(ОписаниеПодчиненногоОбъекта.ФайлФормы);
			Содержимое = ЗаполнитьШаблон(ШаблонФайлаФормы, ДанныеЗаполнения);
			Ждать ЗаписатьВФайл(ИмяФайла, Содержимое);
			
			ИмяФайла = Ждать ПолныйПутьВыгрузкиРасширения(ОписаниеПодчиненногоОбъекта.ФайлМодуля);
			Содержимое = ТекстМодуля(ОписаниеПодчиненногоОбъекта.Методы);
			Содержимое = СтрШаблон("%1%2%3", Содержимое, Символы.ПС, ТекстыМетодовКонтроллеровФормИКоманд());
			Ждать ЗаписатьВФайл(ИмяФайла, Содержимое);
			
		Иначе
			
			// TODO модуль команды
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ТекстМодуля(ОписанияМетодов)
	
	ШаблонМетода = ТекстИзМакета("ШаблонМетода");
	ТекстыМетодов = Новый Массив;
	
	Для Каждого ОписаниеМетода Из ОписанияМетодов Цикл
		
		ДанныеЗаполненияШаблона = ПараметрыШаблона(ШаблонМетода);
		ЗаполнитьЗначенияСвойств(ДанныеЗаполненияШаблона, ОписаниеМетода);
		
		Если ДанныеЗаполненияШаблона.Экспорт Тогда
			ДанныеЗаполненияШаблона.Экспорт = "Экспорт";
		Иначе
			ДанныеЗаполненияШаблона.Экспорт = "";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОписаниеМетода.Событие) Тогда
			
			Если ЗначениеЗаполнено(ОписаниеМетода.РасширяемыйМетод) Тогда
				ДанныеЗаполненияШаблона.Аннотация = СтрШаблон("&%1(""%2"")", ОписаниеМетода.Аннотация, ОписаниеМетода.РасширяемыйМетод);
			Иначе
				ДанныеЗаполненияШаблона.Аннотация = СтрШаблон("&Вместо(""%1"")", ОписаниеМетода.Метод);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеМетода.ДирективаКомпиляции) Тогда
			ДанныеЗаполненияШаблона.ДирективаКомпиляции = СтрШаблон("&%1", ОписаниеМетода.ДирективаКомпиляции);
		КонецЕсли;
		
		ПродолжитьВызов = "";
		
		Если Врег(ОписаниеМетода.Аннотация) = "ВМЕСТО" Или ЗначениеЗаполнено(ОписаниеМетода.Событие) Тогда
			ПродолжитьВызов = СтрШаблон("ПродолжитьВызов(%1);", ОписаниеМетода.Параметры);
		КонецЕсли;
		
		Если ВРег(ОписаниеМетода.ТипМетода) = "ПРОЦЕДУРА" Тогда
			
			ДанныеЗаполненияШаблона.ПродолжитьВызов = ?(ПродолжитьВызов = "", "Возврат;", ПродолжитьВызов);
			ДанныеЗаполненияШаблона.КонецМетода = "КонецПроцедуры";
			
		Иначе
			
			ИмяПеременнойВозврата = СтрШаблон("Чпоньк_%1", СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""));
			
			ДанныеЗаполненияШаблона.ИмяПеременнойВозврата = ИмяПеременнойВозврата;
			ДанныеЗаполненияШаблона.ИнициализацияПеременнойВозврата = " = Неопределено;";
			
			Если ПродолжитьВызов = "" Тогда
				ПродолжитьВызов = СтрШаблон("Возврат %1;", ИмяПеременнойВозврата);
			Иначе
				ПродолжитьВызов = СтрШаблон("Возврат %1", ПродолжитьВызов);
			КонецЕсли;
			
			ДанныеЗаполненияШаблона.ПродолжитьВызов = ПродолжитьВызов;
			ДанныеЗаполненияШаблона.КонецМетода = "КонецФункции";
			
		КонецЕсли;
		
		ТекстыМетодов.Добавить(ЗаполнитьШаблон(ШаблонМетода, ДанныеЗаполненияШаблона));
		
	КонецЦикла;
	
	ТекстМодуля = СтрСоединить(ТекстыМетодов, Символы.ПС + Символы.ПС);
	
	Возврат ТекстМодуля;
	
КонецФункции

&НаКлиенте
Функция ТекстыМетодовКонтроллеров(Модуль, Класс)
	
	ТекстыМетодов = Новый Массив;
	
	Шаблоны = Новый Массив;
	Шаблоны.Добавить(ТекстИзМакета("ШаблонМетодаКонтроллера"));
	Шаблоны.Добавить(ТекстИзМакета("ШаблонМетодаКонтроллераИзвне"));
	
	Директивы = Новый Массив;
	Директивы.Добавить("НаСервере");
	
	Если Класс = "ОбщиеМодули" И МодульНаКлиенте(Модуль) Тогда
		Директивы.Добавить("НаКлиенте");
	КонецЕсли;
	
	ТипыМетодов = СтрРазделить("Процедура,Функция", ",");
	
	Для Каждого Шаблон Из Шаблоны Цикл
		
		ПараметрыШаблона = Новый ФиксированнаяСтруктура(ПараметрыШаблона(Шаблон));
		
		Для Каждого Директива Из Директивы Цикл
			
			Для Каждого ТипМетода Из ТипыМетодов Цикл
				
				ДанныеЗаполнения = Новый Структура(ПараметрыШаблона);
				
				Если Директивы.Количество() > 1 Тогда
					ДанныеЗаполнения.ДирективаКомпиляции = Директива;
					ДанныеЗаполнения.Амперсанд = "&";
				КонецЕсли;
				
				ДанныеЗаполнения.ТипМетода = ТипМетода;
				ДанныеЗаполнения.КонецМетода = "КонецПроцедуры";
				
				Если ТипМетода = "Функция" Тогда
					
					ИмяПеременнойВозврата = СтрШаблон("Чпоньк_%1", СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""));
					
					ДанныеЗаполнения.ИмяПеременнойВозврата = ИмяПеременнойВозврата;
					ДанныеЗаполнения.ИнициализацияПеременнойВозврата = " = Неопределено;";
					ДанныеЗаполнения.КонецМетода = "КонецФункции";
					
				КонецЕсли;
				
				ТекстыМетодов.Добавить(ЗаполнитьШаблон(Шаблон, ДанныеЗаполнения));
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтрСоединить(ТекстыМетодов, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция МодульНаКлиенте(Модуль)
	
	Возврат Метаданные.ОбщиеМодули.Найти(Модуль).КлиентУправляемоеПриложение;
	
КонецФункции

&НаКлиенте
Функция ТекстыМетодовКонтроллеровФормИКоманд()
	
	ТекстыМетодов = Новый Массив;
	
	Директивы = СтрРазделить("НаКлиенте,НаСервере,НаСервереБезКонтекста", ",");
	ТипыМетодов = СтрРазделить("Процедура,Функция", ",");
	Шаблон = ТекстИзМакета("ШаблонМетодаКонтроллера");
	ПараметрыШаблона = Новый ФиксированнаяСтруктура(ПараметрыШаблона(Шаблон));
	
	Для Каждого Директива Из Директивы Цикл
		
		Для Каждого ТипМетода Из ТипыМетодов Цикл
			
			ДанныеЗаполнения = Новый Структура(ПараметрыШаблона);
			ДанныеЗаполнения.Амперсанд = "&";
			ДанныеЗаполнения.ДирективаКомпиляции = Директива;
			ДанныеЗаполнения.ТипМетода = ТипМетода;
			ДанныеЗаполнения.КонецМетода = "КонецПроцедуры";
			
			Если ТипМетода = "Функция" Тогда
				
				ИмяПеременнойВозврата = СтрШаблон("Чпоньк_%1", СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""));
				
				ДанныеЗаполнения.ИмяПеременнойВозврата = ИмяПеременнойВозврата;
				ДанныеЗаполнения.ИнициализацияПеременнойВозврата = " = Неопределено;";
				ДанныеЗаполнения.КонецМетода = "КонецФункции";
				
			КонецЕсли;
			
			ТекстыМетодов.Добавить(ЗаполнитьШаблон(Шаблон, ДанныеЗаполнения));
			
		КонецЦикла;
		
	КонецЦикла;
	
	Директивы = СтрРазделить("НаКлиенте,", ",");
	Шаблон = ТекстИзМакета("ШаблонМетодаКонтроллераИзвне");
	ПараметрыШаблона = Новый ФиксированнаяСтруктура(ПараметрыШаблона(Шаблон));
	
	Для Каждого Директива Из Директивы Цикл
		
		Для Каждого ТипМетода Из ТипыМетодов Цикл
			
			ДанныеЗаполнения = Новый Структура(ПараметрыШаблона);
			ДанныеЗаполнения.ДирективаКомпиляции = Директива;
			ДанныеЗаполнения.ТипМетода = ТипМетода;
			ДанныеЗаполнения.КонецМетода = "КонецПроцедуры";
			
			Если ЗначениеЗаполнено(Директива) Тогда
				ДанныеЗаполнения.Амперсанд = "&";
			КонецЕсли;
			
			Если ТипМетода = "Функция" Тогда
				
				ИмяПеременнойВозврата = СтрШаблон("Чпоньк_%1", СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""));
				
				ДанныеЗаполнения.ИмяПеременнойВозврата = ИмяПеременнойВозврата;
				ДанныеЗаполнения.ИнициализацияПеременнойВозврата = " = Неопределено;";
				ДанныеЗаполнения.ПрисвоениеПеременнойВозврата = СтрШаблон("%1 = ", ИмяПеременнойВозврата);
				ДанныеЗаполнения.КонецМетода = "КонецФункции";
				
			КонецЕсли;
			
			ТекстыМетодов.Добавить(ЗаполнитьШаблон(Шаблон, ДанныеЗаполнения));
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтрСоединить(ТекстыМетодов, Символы.ПС);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыШаблона(Шаблон)
	
	ПараметрыШаблона = Новый Структура;
	
	Части = СтрРазделить(Шаблон, "}", Ложь);
	
	Для Каждого Часть Из Части Цикл
		
		ЧастиЧасти = СтрРазделить(" " + Часть, "{", Ложь);
		Если ЧастиЧасти.Количество() > 1 Тогда
			ПараметрыШаблона.Вставить(ЧастиЧасти[ЧастиЧасти.ВГраница()]);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Параметр Из ПараметрыШаблона Цикл
		
		Если СтрНачинаетсяС(Параметр.Ключ, "Идентификатор_") Тогда
			ПараметрыШаблона.Вставить(Параметр.Ключ, Строка(Новый УникальныйИдентификатор));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПараметрыШаблона;
	
КонецФункции

&НаКлиенте
Функция ОписаниеПодчиненныхОбъектовКонфигурации(КлючиПодчиненныхОбъектов)
	
	ПодчиненныеОбъекты = Новый Массив;
	
	ПоАнглийски = Перевод("МножественноеРусский", "ЕдинственноеАнглийский");
	
	Для Каждого КлючОбъекта Из КлючиПодчиненныхОбъектов Цикл
		
		ЧастиКлюча = СтрРазделить(КлючОбъекта, ".");
		
		ОписаниеОбъекта = СтрШаблон("<%1>%2</%1>", ПоАнглийски[ЧастиКлюча[0]], ЧастиКлюча[1]);
		ПодчиненныеОбъекты.Добавить(ОписаниеОбъекта);
		
	КонецЦикла;
	
	Возврат СтрСоединить(ПодчиненныеОбъекты, Символы.ПС);
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьШаблон(Знач Шаблон, ДанныеЗаполнения = Неопределено)
	
	ЗаполненныйШаблон = Шаблон;
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат ЗаполненныйШаблон;
	КонецЕсли;
	
	Для Каждого ЭлементДанных Из ДанныеЗаполнения Цикл
		
		ПодстрокаПоиска = СтрШаблон("{%1}", ЭлементДанных.Ключ);
		ЗаполненныйШаблон = СтрЗаменить(ЗаполненныйШаблон, ПодстрокаПоиска, XMLСтрока(ЭлементДанных.Значение));
		
	КонецЦикла;
	
	Возврат ЗаполненныйШаблон;
	
КонецФункции

&НаКлиенте
Асинх Функция ЗаписатьВФайл(ИмяФайла, Содержимое, Кодировка = Неопределено)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Содержимое);
	ФайлЗаписан = Ждать ТекстовыйДокумент.ЗаписатьАсинх(ИмяФайла, Кодировка);
	
	Если ФайлЗаписан = Неопределено Тогда
		
		Файл = Новый Файл(ИмяФайла);
		ФайлСуществует = Ждать Файл.СуществуетАсинх();
		
		Если ФайлСуществует = Ложь Тогда
			ВызватьИсключение СтрШаблон("Не удалось записать файл %1", ИмяФайла);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Асинх Функция СоздатьНедостающиеКаталоги(ИмяФайла)
	
	ИмяКаталога = Сред(ИмяФайла, 1, СтрНайти(ИмяФайла, "\", НаправлениеПоиска.СКонца));
	
	Каталог = Новый Файл(ИмяКаталога);
	КаталогСуществует = Ждать Каталог.СуществуетАсинх();
	
	Если КаталогСуществует = Ложь Тогда
		
		СозданныйКаталог = Ждать СоздатьКаталогАсинх(ИмяКаталога);
		
		Если СозданныйКаталог = ИмяКаталога Тогда
			Возврат Истина;
		Иначе
			Возврат СозданныйКаталог;
		КонецЕсли;
		
	Иначе
		
		Возврат КаталогСуществует;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Асинх Функция ПолныйПутьВыгрузкиРасширения(ИмяФайла)
	
	ИсходныеФайлыРасширения = ЗначениеНастройки("ИсходныеФайлыРасширения");
	ИмяФайлаВТекущейОС(ИмяФайла);
	ПолныйПуть = СтрШаблон("%1\%2", ИсходныеФайлыРасширения, ИмяФайла);
	ИмяФайлаВТекущейОС(ПолныйПуть);
	
	Ждать СоздатьНедостающиеКаталоги(ПолныйПуть);
	
	Возврат ПолныйПуть
	
КонецФункции

#КонецОбласти

&НаКлиенте
Функция Перевод(ИсходнаяФорма, ТребуемаяФорма)
	
	Перевод = Новый Соответствие;
	
	Для Каждого Слово Из Объект.Словарь Цикл
		
		Если ЗначениеЗаполнено(Слово[ТребуемаяФорма]) Тогда
			Перевод.Вставить(Слово[ИсходнаяФорма], Слово[ТребуемаяФорма]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Перевод;
	
КонецФункции

&НаКлиенте
Процедура ПеревестиКлючиСтруктуры(Структура, ИсходнаяФорма, ТребуемаяФорма)
	
	Результат = Новый Структура;
	Перевод = Перевод(ИсходнаяФорма, ТребуемаяФорма);
	
	Для Каждого ЭлементСтруктуры Из Структура Цикл
		
		Ключ = Перевод[ЭлементСтруктуры.Ключ];
		
		Если Ключ = Неопределено Тогда
			Ключ = ЭлементСтруктуры.Ключ;
		КонецЕсли;
		
		Результат.Вставить(Ключ, ЭлементСтруктуры.Значение);
		
	КонецЦикла;
	
	Структура = Результат;
	
КонецПроцедуры

&НаКлиенте
Асинх Функция ВыбратьФайл(Фильтр, Режим)
	
	Файл = Неопределено;
	
	Диалог = Новый ДиалогВыбораФайла(Режим);
	Диалог.Фильтр = Фильтр;
	ВыбранныеФайлы = Ждать Диалог.ВыбратьАсинх();
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Файл = Новый Файл(ВыбранныеФайлы[0]);
	КонецЕсли;
	
	Возврат Файл;
	
КонецФункции

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	Элементы.Удалить.Доступность = Элемент.ТекущиеДанные <> Неопределено;
	УстановитьОтборВСвязаннойТаблице("ВыбранныеМетоды.Файл", "Файлы.ПолноеИмя");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборВСвязаннойТаблице(ПолеОтбора, ПолеЗначения)
	
	ЧастиПоляОтбора = СтрРазделить(ПолеОтбора, ".");
	ИмяТаблицы = ЧастиПоляОтбора[0];
	ИмяПоля = ЧастиПоляОтбора[1];
	
	ЧастиПоляЗначения = СтрРазделить(ПолеЗначения, ".");
	ИмяТаблицыИсточника = ЧастиПоляЗначения[0];
	ИмяПоляИсточника = ЧастиПоляЗначения[1];
	
	ДанныеИсточника = Элементы[ИмяТаблицыИсточника].ТекущиеДанные;
	
	Если ДанныеИсточника = Неопределено Тогда
		Отбор = Неопределено;
	Иначе
		Отбор = Новый ФиксированнаяСтруктура(Новый Структура(ИмяПоля, ДанныеИсточника[ИмяПоляИсточника]));
	КонецЕсли;
	
	Элементы[ИмяТаблицы].ОтборСтрок = Отбор;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением()
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Файл", ТекущиеДанные.ПолноеИмя);
	НайденныеСтроки = ВыбранныеМетоды.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		ВыбранныеМетоды.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЗамещающиеМетодыИзНастроек()
	
	Файлы.Очистить();
	ВыбранныеМетоды.Очистить();
	
	ПодключенныеФайлы = ХранилищеОбщихНастроек.Загрузить("Чпоньк", "ПодключенныеФайлы");
	ОписанияЗамещающихМетодов = ХранилищеОбщихНастроек.Загрузить("Чпоньк", "ЗамещающиеМетоды");
	
	Если ПодключенныеФайлы = Неопределено
		Или ОписанияЗамещающихМетодов = Неопределено Тогда
		
		ХранилищеОбщихНастроек.Сохранить("Чпоньк", "ПодключенныеФайлы", Неопределено);
		ХранилищеОбщихНастроек.Сохранить("Чпоньк", "ЗамещающиеМетоды", Неопределено);
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ПодключенныйФайл Из ПодключенныеФайлы Цикл
		НоваяСтрокаФайлы = Файлы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаФайлы, ПодключенныйФайл.Значение);
		НоваяСтрокаФайлы.Подключен = Истина;
	КонецЦикла;
	
	Для Каждого ОписаниеМетода Из ОписанияЗамещающихМетодов Цикл
		
		СтрокаВыбранныеМетоды = ВыбранныеМетоды.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВыбранныеМетоды, ОписаниеМетода.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция УдалитьКомментарииИФорматирование(ТекстовыйДокумент)
	
	ФорматированныеСтроки = Новый Массив;
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		Строка = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
		
		Если СтрНачинаетсяС(СокрЛП(Строка), "#Область ")
			Или СтрНачинаетсяС(СокрЛП(Строка), "#КонецОбласти") Тогда
			Продолжить;
		КонецЕсли;
		
		ЧислоВхожденийСлэшей = СтрЧислоВхождений(Строка, "//");
		
		Если ЧислоВхожденийСлэшей > 0 Тогда
			
			НачальнаяПозиция = 1;
			ПозицияСлэшей = СтрНайти(Строка, "//", , НачальнаяПозиция);
			
			Пока ПозицияСлэшей > 0 Цикл
				
				СтрокаДоСлэшей = Сред(Строка, 1, ПозицияСлэшей - 1);
				ПозицияПереносаСтроки = СтрНайти(СтрокаДоСлэшей, "|", НаправлениеПоиска.СКонца);
				
				Если ПозицияПереносаСтроки = 0 Тогда
					
					Если СтрЧислоВхождений(СтрокаДоСлэшей, """") % 2 = 0 Тогда
						
						Строка = СтрокаДоСлэшей;
						Прервать;
						
					Иначе
						
						ПозицияКавычекПосле = СтрНайти(Строка, """", , ПозицияСлэшей);
						НачальнаяПозиция = ?(ПозицияКавычекПосле = 0, СтрДлина(Строка), ПозицияКавычекПосле);
						
					КонецЕсли;
					
				Иначе
					
					Если СтрЧислоВхождений(Сред(СтрокаДоСлэшей, ПозицияПереносаСтроки, ПозицияСлэшей), """") % 2 = 1 Тогда
						
						Строка = СтрокаДоСлэшей;
						Прервать;
						
					Иначе
						
						НачальнаяПозиция = ПозицияСлэшей + 1;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ПозицияСлэшей = СтрНайти(Строка, "//", , НачальнаяПозиция);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СокрЛП(Строка)) Тогда
			ФорматированныеСтроки.Добавить(СокрЛП(Строка));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(ФорматированныеСтроки, " ");
	
КонецФункции

&НаКлиенте
Асинх Функция ПрочитатьФайл(Файл)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	Ждать ТекстовыйДокумент.ПрочитатьАсинх(Файл.ПолноеИмя, "UTF-8");
	
	Попытка
		
		ТекстБезФорматирования = УдалитьКомментарииИФорматирование(ТекстовыйДокумент);
		ОписанияМетодов = ПрочитатьОписанияМетодов(ТекстБезФорматирования, Файл.ПолноеИмя);
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	ЗаписьФайлы = Ждать ДобавитьЗаписьВФайлы(Файл);
	ЗаписьФайлы.ТекстФайла = ТекстовыйДокумент;
	
	ДобавитьМетодыВВыбранные(ОписанияМетодов);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПрочитатьОписанияМетодов(Текст, ИмяФайла)
	
	ОписанияМетодов = Новый Соответствие;
	
	_Текст = " " + Текст;
	_Текст = СтрЗаменить(_Текст, "  ", " ");
	Разделитель = "☺";
	
	СимволыОбрамленияСлова = Новый Массив;
	СимволыОбрамленияСлова.Добавить(" ");
	СимволыОбрамленияСлова.Добавить(";");
	СимволыОбрамленияСлова.Добавить("");
	
	ПодстрокиПоиска = СтрРазделить("КОНЕЦПРОЦЕДУРЫ,КОНЕЦФУНКЦИИ", ",");
	
	Для Каждого ПодстрокаПоиска Из ПодстрокиПоиска Цикл
		
		ЧислоВхождений = СтрЧислоВхождений(ВРег(_Текст), ПодстрокаПоиска);
		ДлинаПодстроки = СтрДлина(ПодстрокаПоиска);
		НомерВхождения = 1;
		
		Для Сч = 1 По ЧислоВхождений Цикл
			
			ПозицияПодстроки = СтрНайти(ВРег(_Текст), ПодстрокаПоиска, , , НомерВхождения);
			
			ПредыдущийСимвол = Сред(_Текст, ПозицияПодстроки - 1, 1);
			СледующийСимвол = Сред(_Текст, ПозицияПодстроки + ДлинаПодстроки, 1);
			
			Если СимволыОбрамленияСлова.Найти(ПредыдущийСимвол) = Неопределено 
				Или СимволыОбрамленияСлова.Найти(СледующийСимвол) = Неопределено Тогда
				
				НомерВхождения = НомерВхождения + 1;
				Продолжить;
				
			КонецЕсли;
			
			_Текст = СтрШаблон("%1%2%3",
				Сред(_Текст, 1, ПозицияПодстроки + ДлинаПодстроки - 2),
				Разделитель,
				Сред(_текст, ПозицияПодстроки + ДлинаПодстроки));
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстыМетодов = СтрРазделить(_Текст, Разделитель, Ложь);
	МодульОбщий = "";
	ДирективыКомпиляции = СтрРазделить("НАКЛИЕНТЕ,НАСЕРВЕРЕ,НАСЕРВЕРЕБЕЗКОНТЕКСТА,НАКЛИЕНТЕНАСЕРВЕРЕБЕЗКОНТЕКСТА,НАКЛИЕНТЕНАСЕРВЕРЕ", ",");
	Аннотации = СтрРазделить("ВМЕСТО,ПЕРЕД,ПОСЛЕ", ",");
	
	КлючиМетодов = Новый Массив;
	
	Для Каждого ТекстМетода Из ТекстыМетодов Цикл
		
		ОписаниеМетода = НовоеОписаниеМетода();
		ОписаниеМетода.Файл = ИмяФайла;
		
		Если СтрЗаканчиваетсяНа(ВРег(ТекстМетода), "КОНЕЦПРОЦЕДУР") Тогда
			ОписаниеМетода.ТипМетода = "Процедура";
		ИначеЕсли СтрЗаканчиваетсяНа(ВРег(ТекстМетода), "КОНЕЦФУНКЦИ") Тогда
			ОписаниеМетода.ТипМетода = "Функция";
		Иначе
			ВызватьИсключение НСтр("ru = 'Ошибка чтения файла. Не удалось определить конец метода'");
		КонецЕсли;
		
		ПозицияНачалаМетода = СтрНайти(ВРег(ТекстМетода), СтрШаблон(" %1 ", ВРег(ОписаниеМетода.ТипМетода)));
		ПозицияНачалаПараметров = СтрНайти(ТекстМетода, "(", , ПозицияНачалаМетода);
		ПозицияКонцаПараметров = СтрНайти(ТекстМетода, ")", , ПозицияНачалаПараметров);
		ПозицияИмяМетода = ПозицияНачалаМетода + СтрДлина(ОписаниеМетода.ТипМетода) + 1;
		
		БлокИнструкций = СтрЗаменить(СокрЛП(Сред(ТекстМетода, 1, ПозицияНачалаМетода - 1)), "  ", " ");
		
		ОписаниеМетода.Модуль = МодульОбщий;
		ОписаниеМетода.Метод = СокрЛП(Сред(ТекстМетода, ПозицияИмяМетода, ПозицияНачалаПараметров - ПозицияИмяМетода));
		ОписаниеМетода.Параметры = СтрЗаменить(СокрЛП(Сред(ТекстМетода, ПозицияНачалаПараметров + 1, ПозицияКонцаПараметров - ПозицияНачалаПараметров - 1)), ", ", ",");
		
		Если Не ПустаяСтрока(БлокИнструкций) Тогда
			
			ЧастиБлокаИнструкций = СтрРазделить(БлокИнструкций, "&", Ложь);
			
			Для Каждого Часть Из ЧастиБлокаИнструкций Цикл
				
				Если СтрНачинаетсяС(Часть, "@Модуль") Или СтрНачинаетсяС(Часть, "#Модуль") Тогда
					
					Если СтрНачинаетсяС(Часть, "@Модуль") Тогда
						Модуль = СокрЛП(МеждуСтрок(Часть, "@Модуль", "#"));
						МодульОбщий = Модуль;
					Иначе
						Модуль = СокрЛП(МеждуСтрок(Часть, "#Модуль", "#"));
					КонецЕсли;
					
					ОписаниеМетода.Модуль = Модуль;
					
				КонецЕсли;
				
				Если СтрНайти(Часть, "#Событие") > 0 Тогда
					ОписаниеМетода.Событие = МеждуСтрок((МеждуСтрок(Часть, "#Событие")), """", """");
					ОписаниеМетода.ВКонфигурации = Истина;
				КонецЕсли;
				
				Если ДирективыКомпиляции.Найти(ВРег(СокрЛП(Часть))) <> Неопределено Тогда
					ОписаниеМетода.ДирективаКомпиляции = СокрЛП(Часть);
				Иначе
					
					Для Каждого Аннотация Из Аннотации Цикл
						
						Если СтрНачинаетсяС(ВРег(СокрЛП(Часть)), Аннотация) Тогда
							
							ОписаниеМетода.Аннотация = ТРег(Аннотация);
							ОписаниеМетода.РасширяемыйМетод = МеждуСтрок(Часть, """", """");
							ОписаниеМетода.ВКонфигурации = Истина;
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОписаниеМетода.Экспорт = СтрНачинаетсяС(ВРег(СокрЛП(Сред(ТекстМетода, ПозицияКонцаПараметров + 1))), "ЭКСПОРТ");
		
		ДлинаКонецМетода = ?(ОписаниеМетода.ТипМетода = "Процедура", 13, 11);
		Если ОписаниеМетода.Экспорт Тогда
			ПозицияНачалаТелаМетода = ПозицияКонцаПараметров + 9;
		Иначе
			ПозицияНачалаТелаМетода = ПозицияКонцаПараметров + 1;
		КонецЕсли;
		
		КодМетода = СокрЛП(Сред(ТекстМетода, ПозицияНачалаТелаМетода, СтрДлина(ТекстМетода) - ПозицияНачалаТелаМетода - ДлинаКонецМетода));
		ЗаменитьВозвратыНаМеткиВИсходномКоде(КодМетода, ОписаниеМетода.ТипМетода);
		
		ОписаниеМетода.КодМетода = КодМетода;
		СформироватьКлючМетода(ОписаниеМетода);
		
		ОписанияМетодов.Вставить(ОписаниеМетода.Ключ, ОписаниеМетода);
		КлючиМетодов.Добавить(ОписаниеМетода.Ключ);
		
	КонецЦикла;
	
	Для Каждого ОписаниеМетода Из ОписанияМетодов Цикл
		
		Для Каждого КлючЗамещающегоМетода Из КлючиМетодов Цикл
			
			КодМетода = КодМетодаСПодменойВызова(ОписаниеМетода.Значение, КлючЗамещающегоМетода);
			ОписаниеМетода.Значение.КодМетода = КодМетода;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ОписанияМетодов;
	
КонецФункции

&НаКлиенте
Функция НовоеОписаниеМетода()
	
	ОписаниеМетода = Новый Структура;
	ОписаниеМетода.Вставить("Ключ", "");
	ОписаниеМетода.Вставить("Модуль", "");
	ОписаниеМетода.Вставить("ВКонфигурации", Ложь);
	ОписаниеМетода.Вставить("Событие", "");
	ОписаниеМетода.Вставить("Аннотация", "");
	ОписаниеМетода.Вставить("РасширяемыйМетод", "");
	ОписаниеМетода.Вставить("ДирективаКомпиляции", "");
	ОписаниеМетода.Вставить("ТипМетода", "Процедура");
	ОписаниеМетода.Вставить("Метод", "");
	ОписаниеМетода.Вставить("Параметры", "");
	ОписаниеМетода.Вставить("Экспорт", Ложь);
	ОписаниеМетода.Вставить("КодМетода", "");
	ОписаниеМетода.Вставить("Активен", Истина);
	ОписаниеМетода.Вставить("Файл", "");
	
	Возврат ОписаниеМетода;
	
КонецФункции

&НаКлиенте
Функция КодМетодаСПодменойВызова(Знач ВызывающийМетод, КлючМетода)
	
	Если ВызывающийМетод.Ключ = КлючМетода Тогда
		Возврат ВызывающийМетод.КодМетода;
	КонецЕсли;
	
	ИсходныйКод = ВызывающийМетод.КодМетода;
	ЧастиКлюча = СтрРазделить(КлючМетода, "-");
	АтрибутыМетода = ЧастиКлюча[0];
	МодульМетода = ЧастиКлюча[1];
	ИмяМетода = ЧастиКлюча[2];
	ПараметрыМетода = ЧастиКлюча[3];
	
	Если МодульМетода <> ВызывающийМетод.Модуль
		И Сред(АтрибутыМетода, 4, 1) <> "Э" Тогда
		
		Возврат ВызывающийМетод.КодМетода;
		
	КонецЕсли;
	
	ИсходныйКодВРег = ВРег(ИсходныйКод);
	
	СимволыОбрамленияСлова = Новый Массив;
	СимволыОбрамленияСлова.Добавить(";");
	СимволыОбрамленияСлова.Добавить(" ");
	СимволыОбрамленияСлова.Добавить("(");
	СимволыОбрамленияСлова.Добавить("+");
	СимволыОбрамленияСлова.Добавить("-");
	СимволыОбрамленияСлова.Добавить(".");
	// TODO: расширить список обрамляющих симоволов в зависимости от типа метода
	
	//   "В" - Вместо, "Н" - Перед, "К" - После, "_" - Не установлено
	//   "К" - Клиент, "С" - Сервер, "Б" - НаСервереБезКонтекста, "В" - НаКлиентеНаСервереБезКонтекста, "_" - Не установлено
	//   "Ф" - Функция, "П" - Процедура
	//   "Э" - Экспорт, "_" - Не Экспорт
	
	МетодыПодстановки = Новый Соответствие;
	МетодыПодстановки.Вставить("_КП_", "Чпоньк_ВыполнитьПроцедураНаКлиенте");
	МетодыПодстановки.Вставить("_СП_", "Чпоньк_ВыполнитьПроцедураНаСервере");
	МетодыПодстановки.Вставить("_БП_", "Чпоньк_ВыполнитьПроцедураНаСервереБезКонтекста");
	МетодыПодстановки.Вставить("_КФ_", "Чпоньк_ВыполнитьФункцияНаКлиенте");
	МетодыПодстановки.Вставить("_СФ_", "Чпоньк_ВыполнитьФункцияНаСервере");
	МетодыПодстановки.Вставить("_БФ_", "Чпоньк_ВыполнитьФункцияНаСервереБезКонтекста");
	МетодыПодстановки.Вставить("__ФЭ", "Чпоньк_ВыполнитьФункция");
	МетодыПодстановки.Вставить("__ПЭ", "Чпоньк_ВыполнитьПроцедура");
	МетодыПодстановки.Вставить("__Ф_", "Чпоньк_ВыполнитьФункция");
	МетодыПодстановки.Вставить("__П_", "Чпоньк_ВыполнитьПроцедура");
	
	МетодыПодстановкиИзвне = Новый Соответствие;
	МетодыПодстановкиИзвне.Вставить("_КПЭ", "Чпоньк_ВыполнитьПроцедураНаКлиентеИзвне");
	МетодыПодстановкиИзвне.Вставить("_КФЭ", "Чпоньк_ВыполнитьФункцияНаКлиентеИзвне");
	МетодыПодстановкиИзвне.Вставить("__ФЭ", "Чпоньк_ВыполнитьФункцияИзвне");
	МетодыПодстановкиИзвне.Вставить("__ПЭ", "Чпоньк_ВыполнитьПроцедураИзвне");
	
	ДлинаИмени = СтрДлина(ИмяМетода);
	ЧислоВхождений = СтрЧислоВхождений(ИсходныйКодВРег, ВРег(ИмяМетода));
	НомерВхождения = 1;
	ИсходныйКодПослеЗамены = ИсходныйКод;
	
	Для Сч = 1 По ЧислоВхождений Цикл
		
		ПозицияПодстроки = СтрНайти(ИсходныйКодВРег, ВРег(ИмяМетода), , , НомерВхождения);
		
		ПредыдущийСимвол = Сред(ИсходныйКод, ПозицияПодстроки - 1, 1);
		СледующийСимвол = Сред(ИсходныйКод, ПозицияПодстроки + ДлинаИмени, 1);
		
		Если СимволыОбрамленияСлова.Найти(ПредыдущийСимвол) = Неопределено 
			И Не СтрНачинаетсяС(ИсходныйКодВРег, ВРег(ИмяМетода))
			Или СледующийСимвол <> "(" Тогда
			
			НомерВхождения = НомерВхождения + 1;
			Продолжить;
			
		КонецЕсли;
		
		Если ПредыдущийСимвол <> "." И МодульМетода <> ВызывающийМетод.Модуль Тогда
			Продолжить;
		КонецЕсли;
		
		ПозицияНачалаПараметров = ПозицияПодстроки + ДлинаИмени;
		ПозицияКонцаПараметров = СтрНайти(ИсходныйКодВРег, ")", , ПозицияНачалаПараметров);
		
		СтрокаАргументов = СокрЛП(Сред(ИсходныйКод, ПозицияНачалаПараметров + 1, ПозицияКонцаПараметров - ПозицияНачалаПараметров - 1));
		Аргументы = СтрРазделить(СтрокаАргументов, ",");
		Чпоньк_АргументыМетода = Новый Массив;
		Чпоньк_АргументыМетода.Добавить("Чпоньк_АргументыМетода = Новый Массив;");
		
		Если Не (Аргументы.Количество() = 1 И Не ЗначениеЗаполнено(Аргументы[0])) Тогда
			
			Для Каждого Аргумент Из Аргументы Цикл
				Чпоньк_АргументыМетода.Добавить(СтрШаблон("Чпоньк_АргументыМетода.Добавить(%1);", Аргумент));
			КонецЦикла;
			
		КонецЕсли;
		
		ПозицияДляВставкиАргументов = СтрНайти(ИсходныйКодВРег, ";", НаправлениеПоиска.СКонца, ПозицияПодстроки);
		СтрокаДоМетода = Сред(ИсходныйКод, ПозицияДляВставкиАргументов + 1, ПозицияПодстроки - ПозицияДляВставкиАргументов - 1);
		
		Если ПредыдущийСимвол = "." Тогда
			
			СловаДоМетода = СтрРазделить(СтрокаДоМетода, " =+-*/%(,");
			ИмяМодуля = СловаДоМетода[СловаДоМетода.ВГраница()];
			СтрокаДоМетода = Сред(СтрокаДоМетода, 1, СтрДлина(СтрокаДоМетода) - СтрДлина(ИмяМодуля));
			
			ИсходныйКодПослеЗамены = СтрШаблон("%1 %2%3%4(%5, ""%6"", Чпоньк_АргументыМетода)%7",
				Сред(ИсходныйКод, 1, ПозицияДляВставкиАргументов),
				СтрСоединить(Чпоньк_АргументыМетода, " "),
				СтрокаДоМетода,
				МетодыПодстановкиИзвне[АтрибутыМетода],
				Лев(ИмяМодуля, СтрДлина(ИмяМодуля) - 1),
				ИмяМетода,
				Сред(ИсходныйКод, ПозицияКонцаПараметров + 1));
			
		Иначе
			
			ИсходныйКодПослеЗамены = СтрШаблон("%1 %2%3%4(""%5"", Чпоньк_АргументыМетода)%6",
				Сред(ИсходныйКод, 1, ПозицияДляВставкиАргументов),
				СтрСоединить(Чпоньк_АргументыМетода, " "),
				СтрокаДоМетода,
				МетодыПодстановки[АтрибутыМетода],
				КлючМетода,
				Сред(ИсходныйКод, ПозицияКонцаПараметров + 1));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИсходныйКодПослеЗамены;
	
КонецФункции

&НаКлиенте
Процедура ЗаменитьВозвратыНаМеткиВИсходномКоде(ИсходныйКод, ТипМетода)
	
	СимволыОбрамленияСлова = Новый Массив;
	СимволыОбрамленияСлова.Добавить(Символы.Таб);
	СимволыОбрамленияСлова.Добавить(Символы.ВК);
	СимволыОбрамленияСлова.Добавить(Символы.НПП);
	СимволыОбрамленияСлова.Добавить(Символы.ПС);
	СимволыОбрамленияСлова.Добавить(";");
	СимволыОбрамленияСлова.Добавить(" ");
	
	ПодстрокаПоиска = "ВОЗВРАТ";
	ДлинаПодстроки = СтрДлина(ПодстрокаПоиска);
	ЧислоВхождений = СтрЧислоВхождений(ВРег(ИсходныйКод), ПодстрокаПоиска);
	
	Для НомерВхождения = 1 По ЧислоВхождений Цикл
		
		ПозицияПодстроки = СтрНайти(ВРег(ИсходныйКод), ПодстрокаПоиска, , , НомерВхождения);
		
		ПредыдущийСимвол = Сред(ИсходныйКод, ПозицияПодстроки - 1, 1);
		СледующийСимвол = Сред(ИсходныйКод, ПозицияПодстроки + ДлинаПодстроки, 1);
		
		Если СимволыОбрамленияСлова.Найти(ПредыдущийСимвол) = Неопределено 
			Или СимволыОбрамленияСлова.Найти(СледующийСимвол) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТипМетода = "Процедура" Тогда
			
			ИсходныйКод = СтрШаблон("%1ВызватьИсключение ""{Чпоньк_МеткаВозврата}""%2",
				Сред(ИсходныйКод, 1, ПозицияПодстроки - 1),
				Сред(ИсходныйКод, ПозицияПодстроки + ДлинаПодстроки));
			
		Иначе
			
			ПозицияКонцаСтрокиВозврата = СтрНайти(ИсходныйКод, ";", , ПозицияПодстроки + ДлинаПодстроки);
			ИсходныйКод = СтрШаблон("%1{Чпоньк_ИмяПеременнойРезультата} = %2; ВызватьИсключение ""{Чпоньк_МеткаВозврата}""%3",
				Сред(ИсходныйКод, 1, ПозицияПодстроки - 1),
				Сред(ИсходныйКод, ПозицияПодстроки + ДлинаПодстроки, ПозицияКонцаСтрокиВозврата - ПозицияПодстроки - ДлинаПодстроки),
				Сред(ИсходныйКод, ПозицияКонцаСтрокиВозврата + 1));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьPowerShellСкрипт(ФайлСкрипта, Аргументы = Неопределено)
	
	Команда = "powershell -ExecutionPolicy Bypass -File """ + ФайлСкрипта + """";
	
	Если Аргументы <> Неопределено Тогда
		Команда = Команда + " " + Аргументы;
	КонецЕсли;
	
	Оболочка = Новый COMОбъект("WScript.Shell");
	Результат = Оболочка.Run(Команда, 0, 1);
	
	Возврат Результат = 0;
	
КонецФункции

&НаКлиенте
Функция ПреобразоватьКодировку(Текст, ИсходнаяКодировка = "windows-1251", НоваяКодировка = "cp866")
	
	ВременныйФайлИсходный = ПолучитьИмяВременногоФайла();
	
	ЗаписьТекстаИсходный = Новый ТекстовыйДокумент;
	ЗаписьТекстаИсходный.УстановитьТекст(Текст);
	ЗаписьТекстаИсходный.Записать(ВременныйФайлИсходный, ИсходнаяКодировка);
	
	ЧтениеТекстаНовый = Новый ТекстовыйДокумент;
	ЧтениеТекстаНовый.Прочитать(ВременныйФайлИсходный, НоваяКодировка); 
	КонвертированныйТекст = ЧтениеТекстаНовый.ПолучитьТекст();
	
	Попытка
		УдалитьФайлы(ВременныйФайлИсходный);
	Исключение
	КонецПопытки;
	
	Возврат КонвертированныйТекст;
	
КонецФункции

// Шаблон ключа: Атрибуты-Модуль-Метод-Параметры
//  Атрибуты:
//   "В" - Вместо, "Н" - Перед, "К" - После, "_" - Не установлено
//   "К" - Клиент, "С" - Сервер, "Б" - НаСервереБезКонтекста, "В" - НаКлиентеНаСервереБезКонтекста, "_" - Не установлено
//   "Ф" - Функция, "П" - Процедура
//   "Э" - Экспорт, "_" - Не Экспорт
//  Модуль как есть
//  Метод как есть
//  Параметры с замененными пробелам и запятыми на "_"
// Пример:
//  &НаКлиенте
//  Процедура СформироватьКлючМетода(ОписаниеМетода)
//  Ключ = "_КП_-Обработки.Чпоньк.Форма-СформироватьКлючМетода-ОписаниеМетода"
//
// Параметры:
//  ОписаниеМетода	 - Строка	 - 
//
&НаКлиенте
Процедура СформироватьКлючМетода(ОписаниеМетода)
	
	КодыАннотации = Новый Соответствие;
	КодыАннотации.Вставить("Вместо", "В");
	КодыАннотации.Вставить("Перед", "Н");
	КодыАннотации.Вставить("После", "К");
	КодыАннотации.Вставить("", "_");
	
	КодАннотации = КодыАннотации[ОписаниеМетода.Аннотация];
	
	КодыДирективКомпиляции = Новый Соответствие;
	КодыДирективКомпиляции.Вставить("НаКлиенте", "К");
	КодыДирективКомпиляции.Вставить("НаСервере", "С");
	КодыДирективКомпиляции.Вставить("НаСервереБезКонтекста", "Б");
	КодыДирективКомпиляции.Вставить("НаКлиентеНаСервереБезКонтекста", "В");
	КодыДирективКомпиляции.Вставить("", "_");
	
	КодДирективыКомпиляции = КодыДирективКомпиляции[ОписаниеМетода.ДирективаКомпиляции];
	
	КодТипаМетода = Лев(ОписаниеМетода.ТипМетода, 1);
	
	КодЭкспорт = ?(ОписаниеМетода.Экспорт, "Э", "_");
	
	Атрибуты = СтрШаблон("%1%2%3%4", КодАннотации, КодДирективыКомпиляции, КодТипаМетода, КодЭкспорт);
	Модуль = ОписаниеМетода.Модуль;
	Метод = ОписаниеМетода.Метод;
	Параметры_ = СтрЗаменить(СтрЗаменить(ОписаниеМетода.Параметры, " ", "_"), ",", "_");
	
	КлючМетода = СтрШаблон("%1-%2-%3-%4", Атрибуты, Модуль, Метод, Параметры_);
	
	ОписаниеМетода.Ключ = КлючМетода;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМетодыВВыбранные(Методы)
	
	Для Каждого ВыбранныйМетод Из Методы Цикл
		
		НоваяСтрокаМетоды = ВыбранныеМетоды.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаМетоды, ВыбранныйМетод.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

#Область Настройки

&НаКлиенте
Процедура УстановитьНастройку(Ключ, Значение)
	
	ПараметрыОтбора = Новый Структура("Ключ", Ключ);
	НайденныеНастройки = Объект.Настройки.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеНастройки.Количество() = 0 Тогда
		Настройка = Объект.Настройки.Добавить();
		Настройка.Ключ = Ключ;
	Иначе
		Настройка = НайденныеНастройки[0];
	КонецЕсли;
	
	Настройка.Значение = Значение;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗагрузитьНастройки()
	
	Настройки = Ждать ПолучитьФорму("ВнешняяОбработка.Чпоньк.Форма.Настройки", , ЭтаФорма).Настройки();
	ПрименитьНастройки(Настройки);
	
КонецПроцедуры

&НаКлиенте
Функция ЗначениеНастройки(Ключ)
	
	Значение = "";
	
	ПараметрыОтбора = Новый Структура("Ключ", Ключ);
	НайденныеНастройки = Объект.Настройки.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеНастройки.Количество() > 0 Тогда
		Значение = НайденныеНастройки[0].Значение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаКлиенте
Функция ЗначенияНастроек()
	
	Настройки = Новый Структура;
	
	Для Каждого Настройка Из Объект.Настройки Цикл
		Настройки.Вставить(Настройка.Ключ, Настройка.Значение);
	КонецЦикла;
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Функция ЗначениеНастройкиНаСервере(Ключ)
	
	Значение = "";
	
	ПараметрыОтбора = Новый Структура("Ключ", Ключ);
	НайденныеНастройки = Объект.Настройки.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеНастройки.Количество() > 0 Тогда
		Значение = НайденныеНастройки[0].Значение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаКлиенте
Процедура ПрименитьНастройки(Настройки)
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Настройки.Очистить();
		
	Для Каждого Настройка Из Настройки Цикл
		ЗаполнитьЗначенияСвойств(Объект.Настройки.Добавить(), Настройка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастроек(Настройки, ДополнительныеПараметры) Экспорт
	
	ПрименитьНастройки(Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройки()
	
	ПолучитьФорму("ВнешняяОбработка.Чпоньк.Форма.Настройки", , ЭтаФорма).Записать();
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция МеждуСтрок(Знач Строка, ПодстрокаНачало, ПодстрокаКонец = "")
	
	ПозицияНачало = СтрНайти(Строка, ПодстрокаНачало);
	Если ПозицияНачало > 0 Тогда
		ПозицияНачало = ПозицияНачало + СтрДлина(ПодстрокаНачало);
	КонецЕсли;
	
	ПозицияКонец = 0;
	Если ПодстрокаКонец <> "" Тогда
		ПозицияКонец = СтрНайти(Строка, ПодстрокаКонец, , ПозицияНачало);
	КонецЕсли;
	
	Если ПозицияКонец = 0 Тогда
		ПозицияКонец = СтрДлина(Строка) + 1;
	КонецЕсли;
	
	Возврат Сред(Строка, ПозицияНачало, ПозицияКонец - ПозицияНачало);
	
КонецФункции

&НаКлиенте
Асинх Процедура АдресФайлаВерсийНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	Диалог.Каталог = Элемент.ТекстРедактирования;
	Диалог.МножественныйВыбор = Ложь;
	ВыбранныеФайлы = Ждать Диалог.ВыбратьАсинх();
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресФайлаВерсий = ВыбранныеФайлы[0];
	ОбновитьВидимостьЭлементовПоФайлуВерсий(АдресФайлаВерсий);
	ПустойСерверныйМетод();
	Элемент.ОбновитьТекстРедактирования();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОбновитьВидимостьЭлементовПоФайлуВерсий(Путь)
	
	ИмяФайла = СтрШаблон("%1\ConfigDumpInfo.xml", Путь);
	ИнформацияОФайлеВерсий = Ждать ИнформацияОФайле(ИмяФайла);
	
	Если ИнформацияОФайлеВерсий.Существует Тогда
		
		РазмерФайлаВерсий = ИнформацияОФайлеВерсий.Размер;
		ДатаИзмененияФайлаВерсий = ИнформацияОФайлеВерсий.ДатаИзменения;
		
	КонецЕсли;
	
	Элементы.ИнформацияОФайлеВерсий.Видимость = ИнформацияОФайлеВерсий.Существует;
	Элементы.ВыгрузитьФайлВерсий.Видимость = СтрДлина(Путь) > 2 И Не ИнформацияОФайлеВерсий.Существует И ИнформацияОФайлеВерсий.КаталогСуществует;
	Элементы.ДекорацияВыполнено.Видимость = ИнформацияОФайлеВерсий.Существует;
	Элементы.Шаг2.Доступность = ИнформацияОФайлеВерсий.Существует;
	УстановитьДоступностьШаг3();
	
КонецПроцедуры

&НаКлиенте
Асинх Функция ИнформацияОФайле(ИмяФайла)
	
	Результат = Новый Структура("Существует,КаталогСуществует,Размер,ДатаИзменения");
	Файл = Новый Файл(ИмяФайла);
	Каталог = Новый Файл(Файл.Путь);
	
	Результат.Существует = Ждать Файл.СуществуетАсинх();
	Результат.КаталогСуществует = Ждать Каталог.СуществуетАсинх();
	
	Если Результат.Существует Тогда
		
		Результат.Размер = Ждать Файл.РазмерАсинх();
		Результат.ДатаИзменения = Ждать Файл.ПолучитьВремяИзмененияАсинх();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура АдресФайлаВерсийИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	АдресФайлаВерсий = Текст;
	ОбновитьВидимостьЭлементовПоФайлуВерсий(Текст);
КонецПроцедуры

&НаКлиенте
Процедура АдресФайлаВерсийПриИзменении(Элемент)
	ОбновитьВидимостьЭлементовПоФайлуВерсий(АдресФайлаВерсий);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ФайлыПолноеИмяНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	Файл = Ждать ВыбратьПодключаемыйФайл();
	ПодключаемыйФайл = Файл.ПолноеИмя;
	
	Элементы.ДекорацияВыполнено2.Видимость = ЗначениеЗаполнено(ПодключаемыйФайл);
	Элементы.Шаг4.Доступность = ЗначениеЗаполнено(ПодключаемыйФайл);
	
КонецПроцедуры

&НаКлиенте
Асинх Функция ВыбратьПодключаемыйФайл()
	
	Файл = Ждать ВыбратьФайл("1С (*.bsl)|*.bsl", РежимДиалогаВыбораФайла.Открытие);
	
	Если Файл = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ПолноеИмя", Файл.ПолноеИмя);
	НайденныеФайлы = Файлы.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеФайлы.Количество() > 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Указанный файл уже добавлен ранее.'");
		Сообщение.Сообщить();
		Возврат "";
		
	КонецЕсли;
	
	Возврат Файл;
	
КонецФункции

&НаКлиенте
Асинх Процедура Запустить(Команда)
	
	Элементы.Шаг1.Доступность = Ложь;
	Элементы.Шаг2.Доступность = Ложь;
	Элементы.Шаг3.Доступность = Ложь;
	Элементы.Шаг4.Доступность = Ложь;
	
	Файл = Новый Файл(ПодключаемыйФайл);
	
	УстановитьНастройку("ФайлВерсий", АдресФайлаВерсий);
	УстановитьНастройку("РабочийКаталог", Файл.Путь);
	УстановитьНастройку("ИспользоватьCom", ИспользоватьCom);
	УстановитьНастройку("HTTPСервис", АдресПубликацииHTTPСервиса);
	ЗаписатьНастройки();
	
	ФайлПодключен = Ждать ПрочитатьФайл(Файл);
	
	Если Не ФайлПодключен Тогда
		Возврат;
	КонецЕсли;
	
	Если Ждать ЗапуститьОбработку() Тогда
		
		СостояниеЗапуска = "Расширение подключено. Требуется перезагрузка 1с";
		
		ЗаписатьЗаменяющиеМетодыВНастройки();
		ЗаписатьФайлыВНастройки();
		ЗавершитьРаботуСистемы(, Истина);
		
	Иначе
		
		СостояниеЗапуска = "Расширение не подключено";
		
	КонецЕсли;
	
	Элементы.Шаг1.Доступность = Истина;
	Элементы.Шаг2.Доступность = Истина;
	Элементы.Шаг3.Доступность = Истина;
	Элементы.Шаг4.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура Перезапустить(Команда)
	
	Если Ждать ЗапуститьОбработку() Тогда
		
		ЗаписатьЗаменяющиеМетодыВНастройки();
		ЗаписатьФайлыВНастройки();
		ЗавершитьРаботуСистемы(, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Функция ЗапуститьОбработку()
	
	Элементы.ГруппаСостояние.Видимость = Истина;
	ОбработкаСобранаИЗапущена = Ложь;
	
	Если Ждать ЗаполнитьОбъектыКонфигурацииИзФайлаВерсий() = Ложь Тогда
		Возврат ОбработкаСобранаИЗапущена;
	КонецЕсли;
	
	Ждать СформироватьФайлыРасширения();
	
	СоздатьФайлНастройки();
	СоздатьФайлСкрипта();
	
	Если Ждать ВсеФайлыДляСборкиВыгружены() = Ложь Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не удалось выгрузить файлы для сборки расширения. Повторите попытку'");
		Сообщение.Сообщить();
		Возврат ОбработкаСобранаИЗапущена;
		
	КонецЕсли;
	
	РасширениеСобрано = СобратьРасширение();
	РасширениеПодключено = ПодключитьРасширение();
	
	ОбработкаСобранаИЗапущена = РасширениеСобрано И РасширениеПодключено;
	
	Возврат ОбработкаСобранаИЗапущена;
	
КонецФункции

&НаКлиенте
Асинх Функция ВсеФайлыДляСборкиВыгружены()
	
	Таймаут = 2000;
	СтартПроверки = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОкончаниеПроверки = СтартПроверки + Таймаут;
	
	КаталогаВыгрузки = Новый Файл(ЗначениеНастройки("ИсходныеФайлыРасширения"));
	ФайлКода = Новый Файл(Файлы[0].ПолноеИмя);
	ФайлСкрипта = Новый Файл(СтрШаблон("%1Чпоньк.ps1", ФайлКода.Путь));
	ФайлНастроек = Новый Файл(СтрШаблон("%1config.json", ФайлКода.Путь));
	
	ФайлыРасширенияВыгружены = Ложь;
	ФайлСкриптаВыгружен = Ложь;
	ФайлНастроекВыгружен = Ложь;
	
	ФайлыВыгружены = Ложь;
	
	Пока Не ФайлыВыгружены И ТекущаяУниверсальнаяДатаВМиллисекундах() < ОкончаниеПроверки Цикл
		
		Если Не ФайлыРасширенияВыгружены Тогда
			ФайлыРасширенияВыгружены = Ждать КаталогаВыгрузки.СуществуетАсинх();
		КонецЕсли;
		
		Если Не ФайлСкриптаВыгружен Тогда
			ФайлСкриптаВыгружен = Ждать ФайлСкрипта.СуществуетАсинх();
		КонецЕсли;
		
		Если Не ФайлНастроекВыгружен Тогда
			ФайлНастроекВыгружен = Ждать ФайлНастроек.СуществуетАсинх();
		КонецЕсли;
		
		ФайлыВыгружены = ФайлыРасширенияВыгружены И ФайлСкриптаВыгружен И ФайлНастроекВыгружен;
		
	КонецЦикла;
	
	Возврат ФайлыВыгружены;
	
КонецФункции

&НаКлиенте
Асинх Процедура СоздатьФайлНастройки()
	
	СостояниеЗапуска = "Создается файл настроек";
	
	РабочийКаталог = ЗначениеНастройки("РабочийКаталог");
	ИмяФайлаНастроек = СтрШаблон("%1config.json", РабочийКаталог);
	
	Настройки = ЗначенияНастроек();
	ПеревестиКлючиСтруктуры(Настройки, "ЕдинственноеРусский", "ЕдинственноеАнглийский");
	Содержимое = ОбъектВСтрокуJSON(Настройки);
	
	Ждать ЗаписатьВФайл(ИмяФайлаНастроек, Содержимое);
	
	СостояниеЗапуска = "Файл настроек создан";
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура СоздатьФайлСкрипта()
	
	СостояниеЗапуска = "Создается скрипт";
	
	РабочийКаталог = ЗначениеНастройки("РабочийКаталог");
	ИмяФайлаСкрипта = СтрШаблон("%1Чпоньк.ps1", РабочийКаталог);
	
	Содержимое = ТекстИзМакета("СкриптPowerShell");
	
	Ждать ЗаписатьВФайл(ИмяФайлаСкрипта, Содержимое);
	
	СостояниеЗапуска = "Cкрипт создан";
	
КонецПроцедуры

&НаКлиенте
Функция ОбъектВСтрокуJSON(Объект)
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, Объект);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

&НаСервере
Процедура ПустойСерверныйМетод()
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриИзменении()
	
	ПараметрыОтбора = Новый Структура("Подключен", Ложь);
	НеподключенныеФайлы = Файлы.НайтиСтроки(ПараметрыОтбора);
	
	Элементы.Перезапустить.Видимость = НеподключенныеФайлы.Количество() > 0 И Файлы.Количество() > 0;
	
	ЗаписатьЗаменяющиеМетодыВНастройки();
	ЗаписатьФайлыВНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьComПриИзменении(Элемент)
	
	УстановитьДоступностьШаг3();
	Элементы.АдресПубликацииHTTPСервиса.Видимость = Не ИспользоватьCom;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПубликацииHTTPСервисаПриИзменении(Элемент)
	
	УстановитьДоступностьШаг3();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьШаг3()
	
	Элементы.Шаг3.Доступность = ЗначениеЗаполнено(АдресФайлаВерсий) 
		И (ИспользоватьCom Или ЗначениеЗаполнено(АдресПубликацииHTTPСервиса));
	
КонецПроцедуры

#КонецОбласти

